apiVersion: workflow.symphony/v1
kind: CampaignContainer
metadata:
  name: docking
spec:
---
apiVersion: workflow.symphony/v1
kind: Campaign
metadata:
  name: docking-v-v1
spec:
  rootResource: docking
  firstStage: register
  selfDriving: true
  stages:
    register:
      name: register
      provider: providers.stage.materialize
      config:
        baseUrl: http://symphony-service:8080/v1alpha2/
        user: admin
        password: ""
      inputs:
        names:
        - "${{$trigger(truck-template, mock-truck:v1)}}"
      stageSelector: ${{$if($gt($trigger(driver.hours,0),8), notify, fuel)}}
      # ${{$if($gt($trigger(driver.hours,0),8), notify, "")}} if no next stage, empty string 
    notify:
      name: notify
      provider: providers.stage.http
      config:
        name: test
        url: https://prod-15.westus2.logic.azure.com:443/workflows/181cbbdad62e4efc9bcfbd75f96a0398/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=VSwvIYHnyEJMAZW2GDUamOs7v2tK9ptbVnFvj5APbeU # todo update when endpoint for azure logic app is available
        method: "POST"
        successCodes: [ 200, 202 ]
      inputs:
        body:
          driver_name: ${{$trigger(driver.name, test)}}
          hours: ${{$trigger(driver.hours, 0)}}
      stageSelector: dock
    fuel:
      name: fuel
      provider: providers.stage.http
      config:
        name: fuel
        url: http://fuel-pump-service:8000/fuel
        method: "POST"
        successCodes: [ 200, 202 ]
      inputs:
        body:
          current_fuel: ${{$trigger(fuel, 0)}}
          target: 100
          image: ${{$trigger(image.url, "")}}
      stageSelector: check-fuel-state
    dock:
      name: dock
      provider: providers.stage.http
      config:
        name: dock
        url: http://fuel-pump-service:8000/dock
        method: "POST"
        successCodes: [ 200, 202 ]
      inputs:
        body:
          current_fuel: ${{$trigger(fuel, 0)}}
          image: ${{$trigger(image.url, "")}}
          name: ${{$trigger(truck.name, "")}}
      stageSelector: check-fuel-state
    delay:
      name: delay
      provider: providers.stage.delay
      inputs:
        delay: 5s
      stageSelector: check-fuel-state
    check-fuel-state:
      name: check-fuel-state
      provider: providers.stage.http
      config:
        name: check-fuel-state
        url: http://fuel-pump-service:8000/fuel # GET not working for string replacement
        method: "POST"
        successCodes: [ 200, 202 ]
      inputs:
        body:
          name: ${{$trigger(truck.name, "")}}
      stageSelector: patch-target
    patch-target:
      name: patch-target
      provider: providers.stage.patch
      config:
        baseUrl: http://symphony-service:8080/v1alpha2/
        user: admin
        password: ""
      inputs:
        objectType: target
        objectName: avl-truck
        patchSource: inline
        patchContent:
          properties:
            fuel: ${{$output(check-fuel-state, body)}}
      stageSelector: ${{$if($lt($output(check-fuel-state, body), 100), delay, undock)}}
    undock:
      name: undock
      provider: providers.stage.http
      config:
        name: undock
        url: http://fuel-pump-service:8000/undock
        method: "POST"
        successCodes: [ 200, 202 ]
      inputs:
        body:
          name: ${{$trigger(truck.name, "")}}
