// Copyright (c) 2023 Elektrobit Automotive GmbH
//
// This program and the accompanying materials are made available under the
// terms of the Apache License, Version 2.0 which is available at
// https://www.apache.org/licenses/LICENSE-2.0.
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0

// [impl->swdd~ank-base-provides-object-definitions~1]

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.12.4
// source: ank_base.proto

package ank_base

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// An enum type describing the expected workload state. Used for dependency management.
type AddCondition int32

const (
	AddCondition_ADD_COND_RUNNING   AddCondition = 0 /// The workload is operational.
	AddCondition_ADD_COND_SUCCEEDED AddCondition = 1 /// The workload has successfully exited.
	AddCondition_ADD_COND_FAILED    AddCondition = 2 /// The workload has exited with an error or could not be started.
)

// Enum value maps for AddCondition.
var (
	AddCondition_name = map[int32]string{
		0: "ADD_COND_RUNNING",
		1: "ADD_COND_SUCCEEDED",
		2: "ADD_COND_FAILED",
	}
	AddCondition_value = map[string]int32{
		"ADD_COND_RUNNING":   0,
		"ADD_COND_SUCCEEDED": 1,
		"ADD_COND_FAILED":    2,
	}
)

func (x AddCondition) Enum() *AddCondition {
	p := new(AddCondition)
	*p = x
	return p
}

func (x AddCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[0].Descriptor()
}

func (AddCondition) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[0]
}

func (x AddCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddCondition.Descriptor instead.
func (AddCondition) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{0}
}

// *
// The workload was removed from Ankaios. This state is used only internally in Ankaios. The outside world removed states are just not there.
type Removed int32

const (
	Removed_REMOVED Removed = 0
)

// Enum value maps for Removed.
var (
	Removed_name = map[int32]string{
		0: "REMOVED",
	}
	Removed_value = map[string]int32{
		"REMOVED": 0,
	}
)

func (x Removed) Enum() *Removed {
	p := new(Removed)
	*p = x
	return p
}

func (x Removed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Removed) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[1].Descriptor()
}

func (Removed) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[1]
}

func (x Removed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Removed.Descriptor instead.
func (Removed) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{1}
}

// *
// The exact state of the workload cannot be determined, e.g., because of a broken connection to the responsible agent.
type AgentDisconnected int32

const (
	AgentDisconnected_AGENT_DISCONNECTED AgentDisconnected = 0
)

// Enum value maps for AgentDisconnected.
var (
	AgentDisconnected_name = map[int32]string{
		0: "AGENT_DISCONNECTED",
	}
	AgentDisconnected_value = map[string]int32{
		"AGENT_DISCONNECTED": 0,
	}
)

func (x AgentDisconnected) Enum() *AgentDisconnected {
	p := new(AgentDisconnected)
	*p = x
	return p
}

func (x AgentDisconnected) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentDisconnected) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[2].Descriptor()
}

func (AgentDisconnected) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[2]
}

func (x AgentDisconnected) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentDisconnected.Descriptor instead.
func (AgentDisconnected) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{2}
}

// *
// The workload is not scheduled to run at any agent. This is signalized with an empty agent in the workload specification.
type NotScheduled int32

const (
	NotScheduled_NOT_SCHEDULED NotScheduled = 0
)

// Enum value maps for NotScheduled.
var (
	NotScheduled_name = map[int32]string{
		0: "NOT_SCHEDULED",
	}
	NotScheduled_value = map[string]int32{
		"NOT_SCHEDULED": 0,
	}
)

func (x NotScheduled) Enum() *NotScheduled {
	p := new(NotScheduled)
	*p = x
	return p
}

func (x NotScheduled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotScheduled) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[3].Descriptor()
}

func (NotScheduled) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[3]
}

func (x NotScheduled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotScheduled.Descriptor instead.
func (NotScheduled) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{3}
}

// *
// The workload is going to be started eventually.
type Pending int32

const (
	Pending_PENDING_INITIAL          Pending = 0 /// The workload specification has not yet being scheduled
	Pending_PENDING_WAITING_TO_START Pending = 1 /// The start of the workload will be triggered once all its dependencies are met.
	Pending_PENDING_STARTING         Pending = 2 /// Starting the workload was scheduled at the corresponding runtime.
	Pending_PENDING_STARTING_FAILED  Pending = 8 /// The starting of the workload by the runtime failed.
)

// Enum value maps for Pending.
var (
	Pending_name = map[int32]string{
		0: "PENDING_INITIAL",
		1: "PENDING_WAITING_TO_START",
		2: "PENDING_STARTING",
		8: "PENDING_STARTING_FAILED",
	}
	Pending_value = map[string]int32{
		"PENDING_INITIAL":          0,
		"PENDING_WAITING_TO_START": 1,
		"PENDING_STARTING":         2,
		"PENDING_STARTING_FAILED":  8,
	}
)

func (x Pending) Enum() *Pending {
	p := new(Pending)
	*p = x
	return p
}

func (x Pending) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pending) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[4].Descriptor()
}

func (Pending) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[4]
}

func (x Pending) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pending.Descriptor instead.
func (Pending) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{4}
}

// *
// The workload is operational.
type Running int32

const (
	Running_RUNNING_OK Running = 0 /// The workload is operational.
)

// Enum value maps for Running.
var (
	Running_name = map[int32]string{
		0: "RUNNING_OK",
	}
	Running_value = map[string]int32{
		"RUNNING_OK": 0,
	}
)

func (x Running) Enum() *Running {
	p := new(Running)
	*p = x
	return p
}

func (x Running) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Running) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[5].Descriptor()
}

func (Running) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[5]
}

func (x Running) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Running.Descriptor instead.
func (Running) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{5}
}

// *
// The workload is scheduled for stopping.
type Stopping int32

const (
	Stopping_STOPPING                      Stopping = 0 /// The workload is being stopped.
	Stopping_STOPPING_WAITING_TO_STOP      Stopping = 1 /// The deletion of the workload will be triggered once neither 'pending' nor 'running' workload depending on it exists.
	Stopping_STOPPING_REQUESTED_AT_RUNTIME Stopping = 2 /// This is an Ankaios generated state returned when the stopping was explicitly trigged by the user and the request was sent to the runtime.
	Stopping_STOPPING_DELETE_FAILED        Stopping = 8 /// The deletion of the workload by the runtime failed.
)

// Enum value maps for Stopping.
var (
	Stopping_name = map[int32]string{
		0: "STOPPING",
		1: "STOPPING_WAITING_TO_STOP",
		2: "STOPPING_REQUESTED_AT_RUNTIME",
		8: "STOPPING_DELETE_FAILED",
	}
	Stopping_value = map[string]int32{
		"STOPPING":                      0,
		"STOPPING_WAITING_TO_STOP":      1,
		"STOPPING_REQUESTED_AT_RUNTIME": 2,
		"STOPPING_DELETE_FAILED":        8,
	}
)

func (x Stopping) Enum() *Stopping {
	p := new(Stopping)
	*p = x
	return p
}

func (x Stopping) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stopping) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[6].Descriptor()
}

func (Stopping) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[6]
}

func (x Stopping) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stopping.Descriptor instead.
func (Stopping) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{6}
}

// *
// The workload has successfully finished operation.
type Succeeded int32

const (
	Succeeded_SUCCEEDED_OK Succeeded = 0 /// The workload has successfully finished operation.
)

// Enum value maps for Succeeded.
var (
	Succeeded_name = map[int32]string{
		0: "SUCCEEDED_OK",
	}
	Succeeded_value = map[string]int32{
		"SUCCEEDED_OK": 0,
	}
)

func (x Succeeded) Enum() *Succeeded {
	p := new(Succeeded)
	*p = x
	return p
}

func (x Succeeded) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Succeeded) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[7].Descriptor()
}

func (Succeeded) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[7]
}

func (x Succeeded) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Succeeded.Descriptor instead.
func (Succeeded) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{7}
}

// *
// The workload has failed or is in a degraded state.
type Failed int32

const (
	Failed_FAILED_EXEC_FAILED Failed = 0 /// The workload has failed during operation
	Failed_FAILED_UNKNOWN     Failed = 1 /// The workload is in an unsupported by Ankaios runtime state. The workload was possibly altered outside of Ankaios.
	Failed_FAILED_LOST        Failed = 2 /// The workload cannot be found anymore. The workload was possibly altered outside of Ankaios or was auto-removed by the runtime.
)

// Enum value maps for Failed.
var (
	Failed_name = map[int32]string{
		0: "FAILED_EXEC_FAILED",
		1: "FAILED_UNKNOWN",
		2: "FAILED_LOST",
	}
	Failed_value = map[string]int32{
		"FAILED_EXEC_FAILED": 0,
		"FAILED_UNKNOWN":     1,
		"FAILED_LOST":        2,
	}
)

func (x Failed) Enum() *Failed {
	p := new(Failed)
	*p = x
	return p
}

func (x Failed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Failed) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[8].Descriptor()
}

func (Failed) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[8]
}

func (x Failed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Failed.Descriptor instead.
func (Failed) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{8}
}

// *
// An enum type describing the restart behavior of a workload.
type RestartPolicy int32

const (
	RestartPolicy_NEVER      RestartPolicy = 0 /// The workload is never restarted. Once the workload exits, it remains in the exited state.
	RestartPolicy_ON_FAILURE RestartPolicy = 1 /// If the workload exits with a non-zero exit code, it will be restarted.
	RestartPolicy_ALWAYS     RestartPolicy = 2 /// The workload is restarted upon termination, regardless of the exit code.
)

// Enum value maps for RestartPolicy.
var (
	RestartPolicy_name = map[int32]string{
		0: "NEVER",
		1: "ON_FAILURE",
		2: "ALWAYS",
	}
	RestartPolicy_value = map[string]int32{
		"NEVER":      0,
		"ON_FAILURE": 1,
		"ALWAYS":     2,
	}
)

func (x RestartPolicy) Enum() *RestartPolicy {
	p := new(RestartPolicy)
	*p = x
	return p
}

func (x RestartPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestartPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[9].Descriptor()
}

func (RestartPolicy) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[9]
}

func (x RestartPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestartPolicy.Descriptor instead.
func (RestartPolicy) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{9}
}

// *
// An enum type describing which action is allowed.
type ReadWriteEnum int32

const (
	ReadWriteEnum_RW_NOTHING    ReadWriteEnum = 0 // Allow nothing
	ReadWriteEnum_RW_READ       ReadWriteEnum = 1 // Allow read
	ReadWriteEnum_RW_WRITE      ReadWriteEnum = 2 // Allow write
	ReadWriteEnum_RW_READ_WRITE ReadWriteEnum = 5 // Allow read and write
)

// Enum value maps for ReadWriteEnum.
var (
	ReadWriteEnum_name = map[int32]string{
		0: "RW_NOTHING",
		1: "RW_READ",
		2: "RW_WRITE",
		5: "RW_READ_WRITE",
	}
	ReadWriteEnum_value = map[string]int32{
		"RW_NOTHING":    0,
		"RW_READ":       1,
		"RW_WRITE":      2,
		"RW_READ_WRITE": 5,
	}
)

func (x ReadWriteEnum) Enum() *ReadWriteEnum {
	p := new(ReadWriteEnum)
	*p = x
	return p
}

func (x ReadWriteEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadWriteEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_ank_base_proto_enumTypes[10].Descriptor()
}

func (ReadWriteEnum) Type() protoreflect.EnumType {
	return &file_ank_base_proto_enumTypes[10]
}

func (x ReadWriteEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadWriteEnum.Descriptor instead.
func (ReadWriteEnum) EnumDescriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{10}
}

// *
// A message containing a request to the Ankaios server to update the state or to request the complete state of the Ankaios system.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// Types that are assignable to RequestContent:
	//
	//	*Request_UpdateStateRequest
	//	*Request_CompleteStateRequest
	RequestContent isRequest_RequestContent `protobuf_oneof:"RequestContent"`
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_ank_base_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (m *Request) GetRequestContent() isRequest_RequestContent {
	if m != nil {
		return m.RequestContent
	}
	return nil
}

func (x *Request) GetUpdateStateRequest() *UpdateStateRequest {
	if x, ok := x.GetRequestContent().(*Request_UpdateStateRequest); ok {
		return x.UpdateStateRequest
	}
	return nil
}

func (x *Request) GetCompleteStateRequest() *CompleteStateRequest {
	if x, ok := x.GetRequestContent().(*Request_CompleteStateRequest); ok {
		return x.CompleteStateRequest
	}
	return nil
}

type isRequest_RequestContent interface {
	isRequest_RequestContent()
}

type Request_UpdateStateRequest struct {
	UpdateStateRequest *UpdateStateRequest `protobuf:"bytes,2,opt,name=updateStateRequest,proto3,oneof"` /// A message to Ankaios server to update the state of one or more agent(s).
}

type Request_CompleteStateRequest struct {
	CompleteStateRequest *CompleteStateRequest `protobuf:"bytes,3,opt,name=completeStateRequest,proto3,oneof"` /// A message to Ankaios server to request the complete state by the given request id and the optional field mask.
}

func (*Request_UpdateStateRequest) isRequest_RequestContent() {}

func (*Request_CompleteStateRequest) isRequest_RequestContent() {}

// *
// A message containing a response from the Ankaios server to a particular request.
// The response content depends on the request content previously sent to the Ankaios server.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// Types that are assignable to ResponseContent:
	//
	//	*Response_Error
	//	*Response_CompleteState
	//	*Response_UpdateStateSuccess
	ResponseContent isResponse_ResponseContent `protobuf_oneof:"ResponseContent"`
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_ank_base_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (m *Response) GetResponseContent() isResponse_ResponseContent {
	if m != nil {
		return m.ResponseContent
	}
	return nil
}

func (x *Response) GetError() *Error {
	if x, ok := x.GetResponseContent().(*Response_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Response) GetCompleteState() *CompleteState {
	if x, ok := x.GetResponseContent().(*Response_CompleteState); ok {
		return x.CompleteState
	}
	return nil
}

func (x *Response) GetUpdateStateSuccess() *UpdateStateSuccess {
	if x, ok := x.GetResponseContent().(*Response_UpdateStateSuccess); ok {
		return x.UpdateStateSuccess
	}
	return nil
}

type isResponse_ResponseContent interface {
	isResponse_ResponseContent()
}

type Response_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type Response_CompleteState struct {
	CompleteState *CompleteState `protobuf:"bytes,4,opt,name=completeState,proto3,oneof"`
}

type Response_UpdateStateSuccess struct {
	UpdateStateSuccess *UpdateStateSuccess `protobuf:"bytes,5,opt,name=UpdateStateSuccess,proto3,oneof"`
}

func (*Response_Error) isResponse_ResponseContent() {}

func (*Response_CompleteState) isResponse_ResponseContent() {}

func (*Response_UpdateStateSuccess) isResponse_ResponseContent() {}

// *
// A message containing a request for the complete/partial state of the Ankaios system.
// This is usually answered with a [CompleteState](#completestate) message.
type CompleteStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldMask []string `protobuf:"bytes,1,rep,name=fieldMask,proto3" json:"fieldMask,omitempty"` /// A list of symbolic field paths within the State message structure e.g. 'desiredState.workloads.nginx'.
}

func (x *CompleteStateRequest) Reset() {
	*x = CompleteStateRequest{}
	mi := &file_ank_base_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteStateRequest) ProtoMessage() {}

func (x *CompleteStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteStateRequest.ProtoReflect.Descriptor instead.
func (*CompleteStateRequest) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{2}
}

func (x *CompleteStateRequest) GetFieldMask() []string {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// *
// A message containing a request to update the state of the Ankaios system.
// The new state is provided as state object.
// To specify which part(s) of the new state object should be updated
// a list of update mask (same as field mask) paths needs to be provided.
type UpdateStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewState   *CompleteState `protobuf:"bytes,1,opt,name=newState,proto3" json:"newState,omitempty"`     /// The new state of the Ankaios system.
	UpdateMask []string       `protobuf:"bytes,2,rep,name=updateMask,proto3" json:"updateMask,omitempty"` /// A list of symbolic field paths within the state message structure e.g. 'desiredState.workloads.nginx' to specify what to be updated.
}

func (x *UpdateStateRequest) Reset() {
	*x = UpdateStateRequest{}
	mi := &file_ank_base_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateRequest) ProtoMessage() {}

func (x *UpdateStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateStateRequest) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateStateRequest) GetNewState() *CompleteState {
	if x != nil {
		return x.NewState
	}
	return nil
}

func (x *UpdateStateRequest) GetUpdateMask() []string {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// *
// A message from the server containing the ids of the workloads that have been started and stopped in response to a previously sent UpdateStateRequest.
type UpdateStateSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedWorkloads   []string `protobuf:"bytes,1,rep,name=addedWorkloads,proto3" json:"addedWorkloads,omitempty"`     /// Workload istance names of workloads which will be started
	DeletedWorkloads []string `protobuf:"bytes,2,rep,name=deletedWorkloads,proto3" json:"deletedWorkloads,omitempty"` /// Workload instance names of workloads which will be stopped
}

func (x *UpdateStateSuccess) Reset() {
	*x = UpdateStateSuccess{}
	mi := &file_ank_base_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStateSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateSuccess) ProtoMessage() {}

func (x *UpdateStateSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateSuccess.ProtoReflect.Descriptor instead.
func (*UpdateStateSuccess) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateStateSuccess) GetAddedWorkloads() []string {
	if x != nil {
		return x.AddedWorkloads
	}
	return nil
}

func (x *UpdateStateSuccess) GetDeletedWorkloads() []string {
	if x != nil {
		return x.DeletedWorkloads
	}
	return nil
}

// *
// A message containing the complete state of the Ankaios system.
// This is a response to the [CompleteStateRequest](#completestaterequest) message.
type CompleteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredState   *State             `protobuf:"bytes,1,opt,name=desiredState,proto3" json:"desiredState,omitempty"`     /// The state the user wants to reach.
	WorkloadStates *WorkloadStatesMap `protobuf:"bytes,2,opt,name=workloadStates,proto3" json:"workloadStates,omitempty"` /// The current execution states of the workloads.
	Agents         *AgentMap          `protobuf:"bytes,3,opt,name=agents,proto3" json:"agents,omitempty"`                 /// The agents currently connected to the Ankaios cluster.
}

func (x *CompleteState) Reset() {
	*x = CompleteState{}
	mi := &file_ank_base_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteState) ProtoMessage() {}

func (x *CompleteState) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteState.ProtoReflect.Descriptor instead.
func (*CompleteState) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{5}
}

func (x *CompleteState) GetDesiredState() *State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *CompleteState) GetWorkloadStates() *WorkloadStatesMap {
	if x != nil {
		return x.WorkloadStates
	}
	return nil
}

func (x *CompleteState) GetAgents() *AgentMap {
	if x != nil {
		return x.Agents
	}
	return nil
}

// *
// A nested map that provides the execution state of a workload in a structured way.
// The first level allows searches by agent.
type WorkloadStatesMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentStateMap map[string]*ExecutionsStatesOfWorkload `protobuf:"bytes,1,rep,name=agentStateMap,proto3" json:"agentStateMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkloadStatesMap) Reset() {
	*x = WorkloadStatesMap{}
	mi := &file_ank_base_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadStatesMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadStatesMap) ProtoMessage() {}

func (x *WorkloadStatesMap) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadStatesMap.ProtoReflect.Descriptor instead.
func (*WorkloadStatesMap) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{6}
}

func (x *WorkloadStatesMap) GetAgentStateMap() map[string]*ExecutionsStatesOfWorkload {
	if x != nil {
		return x.AgentStateMap
	}
	return nil
}

// *
// A map providing the execution state of a workload for a given name.
type ExecutionsStatesOfWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WlNameStateMap map[string]*ExecutionsStatesForId `protobuf:"bytes,1,rep,name=wlNameStateMap,proto3" json:"wlNameStateMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecutionsStatesOfWorkload) Reset() {
	*x = ExecutionsStatesOfWorkload{}
	mi := &file_ank_base_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionsStatesOfWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionsStatesOfWorkload) ProtoMessage() {}

func (x *ExecutionsStatesOfWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionsStatesOfWorkload.ProtoReflect.Descriptor instead.
func (*ExecutionsStatesOfWorkload) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{7}
}

func (x *ExecutionsStatesOfWorkload) GetWlNameStateMap() map[string]*ExecutionsStatesForId {
	if x != nil {
		return x.WlNameStateMap
	}
	return nil
}

// *
// A map providing the execution state of a specific workload for a given id.
// This level is needed as a workload could be running more than once on one agent in different versions.
type ExecutionsStatesForId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdStateMap map[string]*ExecutionState `protobuf:"bytes,1,rep,name=idStateMap,proto3" json:"idStateMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecutionsStatesForId) Reset() {
	*x = ExecutionsStatesForId{}
	mi := &file_ank_base_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionsStatesForId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionsStatesForId) ProtoMessage() {}

func (x *ExecutionsStatesForId) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionsStatesForId.ProtoReflect.Descriptor instead.
func (*ExecutionsStatesForId) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{8}
}

func (x *ExecutionsStatesForId) GetIdStateMap() map[string]*ExecutionState {
	if x != nil {
		return x.IdStateMap
	}
	return nil
}

// *
// A message containing information about the detailed state of a workload in the Ankaios system.
type ExecutionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalInfo string `protobuf:"bytes,1,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"` /// The additional info contains more detailed information from the runtime regarding the execution state.
	// Types that are assignable to ExecutionStateEnum:
	//
	//	*ExecutionState_AgentDisconnected
	//	*ExecutionState_Pending
	//	*ExecutionState_Running
	//	*ExecutionState_Stopping
	//	*ExecutionState_Succeeded
	//	*ExecutionState_Failed
	//	*ExecutionState_NotScheduled
	//	*ExecutionState_Removed
	ExecutionStateEnum isExecutionState_ExecutionStateEnum `protobuf_oneof:"ExecutionStateEnum"`
}

func (x *ExecutionState) Reset() {
	*x = ExecutionState{}
	mi := &file_ank_base_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionState) ProtoMessage() {}

func (x *ExecutionState) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionState.ProtoReflect.Descriptor instead.
func (*ExecutionState) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{9}
}

func (x *ExecutionState) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (m *ExecutionState) GetExecutionStateEnum() isExecutionState_ExecutionStateEnum {
	if m != nil {
		return m.ExecutionStateEnum
	}
	return nil
}

func (x *ExecutionState) GetAgentDisconnected() AgentDisconnected {
	if x, ok := x.GetExecutionStateEnum().(*ExecutionState_AgentDisconnected); ok {
		return x.AgentDisconnected
	}
	return AgentDisconnected_AGENT_DISCONNECTED
}

func (x *ExecutionState) GetPending() Pending {
	if x, ok := x.GetExecutionStateEnum().(*ExecutionState_Pending); ok {
		return x.Pending
	}
	return Pending_PENDING_INITIAL
}

func (x *ExecutionState) GetRunning() Running {
	if x, ok := x.GetExecutionStateEnum().(*ExecutionState_Running); ok {
		return x.Running
	}
	return Running_RUNNING_OK
}

func (x *ExecutionState) GetStopping() Stopping {
	if x, ok := x.GetExecutionStateEnum().(*ExecutionState_Stopping); ok {
		return x.Stopping
	}
	return Stopping_STOPPING
}

func (x *ExecutionState) GetSucceeded() Succeeded {
	if x, ok := x.GetExecutionStateEnum().(*ExecutionState_Succeeded); ok {
		return x.Succeeded
	}
	return Succeeded_SUCCEEDED_OK
}

func (x *ExecutionState) GetFailed() Failed {
	if x, ok := x.GetExecutionStateEnum().(*ExecutionState_Failed); ok {
		return x.Failed
	}
	return Failed_FAILED_EXEC_FAILED
}

func (x *ExecutionState) GetNotScheduled() NotScheduled {
	if x, ok := x.GetExecutionStateEnum().(*ExecutionState_NotScheduled); ok {
		return x.NotScheduled
	}
	return NotScheduled_NOT_SCHEDULED
}

func (x *ExecutionState) GetRemoved() Removed {
	if x, ok := x.GetExecutionStateEnum().(*ExecutionState_Removed); ok {
		return x.Removed
	}
	return Removed_REMOVED
}

type isExecutionState_ExecutionStateEnum interface {
	isExecutionState_ExecutionStateEnum()
}

type ExecutionState_AgentDisconnected struct {
	AgentDisconnected AgentDisconnected `protobuf:"varint,2,opt,name=agentDisconnected,proto3,enum=ank_base.AgentDisconnected,oneof"` /// The exact state of the workload cannot be determined, e.g., because of a broken connection to the responsible agent.
}

type ExecutionState_Pending struct {
	Pending Pending `protobuf:"varint,3,opt,name=pending,proto3,enum=ank_base.Pending,oneof"` /// The workload is going to be started eventually.
}

type ExecutionState_Running struct {
	Running Running `protobuf:"varint,4,opt,name=running,proto3,enum=ank_base.Running,oneof"` /// The workload is operational.
}

type ExecutionState_Stopping struct {
	Stopping Stopping `protobuf:"varint,5,opt,name=stopping,proto3,enum=ank_base.Stopping,oneof"` /// The workload is scheduled for stopping.
}

type ExecutionState_Succeeded struct {
	Succeeded Succeeded `protobuf:"varint,6,opt,name=succeeded,proto3,enum=ank_base.Succeeded,oneof"` /// The workload has successfully finished its operation.
}

type ExecutionState_Failed struct {
	Failed Failed `protobuf:"varint,7,opt,name=failed,proto3,enum=ank_base.Failed,oneof"` /// The workload has failed or is in a degraded state.
}

type ExecutionState_NotScheduled struct {
	NotScheduled NotScheduled `protobuf:"varint,8,opt,name=notScheduled,proto3,enum=ank_base.NotScheduled,oneof"` /// The workload is not scheduled to run at any agent. This is signalized with an empty agent in the workload specification.
}

type ExecutionState_Removed struct {
	Removed Removed `protobuf:"varint,9,opt,name=removed,proto3,enum=ank_base.Removed,oneof"` /// The workload was removed from Ankaios. This state is used only internally in Ankaios. The outside world removed states are just not there.
}

func (*ExecutionState_AgentDisconnected) isExecutionState_ExecutionStateEnum() {}

func (*ExecutionState_Pending) isExecutionState_ExecutionStateEnum() {}

func (*ExecutionState_Running) isExecutionState_ExecutionStateEnum() {}

func (*ExecutionState_Stopping) isExecutionState_ExecutionStateEnum() {}

func (*ExecutionState_Succeeded) isExecutionState_ExecutionStateEnum() {}

func (*ExecutionState_Failed) isExecutionState_ExecutionStateEnum() {}

func (*ExecutionState_NotScheduled) isExecutionState_ExecutionStateEnum() {}

func (*ExecutionState_Removed) isExecutionState_ExecutionStateEnum() {}

// *
// A nested map that provides the names of the connected agents and their optional attributes.
// The first level allows searches by agent name.
type AgentMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents map[string]*AgentAttributes `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AgentMap) Reset() {
	*x = AgentMap{}
	mi := &file_ank_base_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMap) ProtoMessage() {}

func (x *AgentMap) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMap.ProtoReflect.Descriptor instead.
func (*AgentMap) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{10}
}

func (x *AgentMap) GetAgents() map[string]*AgentAttributes {
	if x != nil {
		return x.Agents
	}
	return nil
}

// *
// A message containing the CPU usage information of the agent.
type CpuUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsage uint32 `protobuf:"varint,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"` // expressed in percent, the formula for calculating: cpu_usage = (new_work_time - old_work_time) / (new_total_time - old_total_time) * 100
}

func (x *CpuUsage) Reset() {
	*x = CpuUsage{}
	mi := &file_ank_base_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuUsage) ProtoMessage() {}

func (x *CpuUsage) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuUsage.ProtoReflect.Descriptor instead.
func (*CpuUsage) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{11}
}

func (x *CpuUsage) GetCpuUsage() uint32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

// *
// A message containing the amount of free memory of the agent.
type FreeMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeMemory uint64 `protobuf:"varint,1,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"` // expressed in bytes
}

func (x *FreeMemory) Reset() {
	*x = FreeMemory{}
	mi := &file_ank_base_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreeMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeMemory) ProtoMessage() {}

func (x *FreeMemory) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeMemory.ProtoReflect.Descriptor instead.
func (*FreeMemory) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{12}
}

func (x *FreeMemory) GetFreeMemory() uint64 {
	if x != nil {
		return x.FreeMemory
	}
	return 0
}

// *
// A message that contains attributes of the agent.
type AgentAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsage   *CpuUsage   `protobuf:"bytes,1,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`       /// The cpu usage of the agent.
	FreeMemory *FreeMemory `protobuf:"bytes,2,opt,name=free_memory,json=freeMemory,proto3" json:"free_memory,omitempty"` /// The amount of free memory of the agent.
}

func (x *AgentAttributes) Reset() {
	*x = AgentAttributes{}
	mi := &file_ank_base_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAttributes) ProtoMessage() {}

func (x *AgentAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAttributes.ProtoReflect.Descriptor instead.
func (*AgentAttributes) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{13}
}

func (x *AgentAttributes) GetCpuUsage() *CpuUsage {
	if x != nil {
		return x.CpuUsage
	}
	return nil
}

func (x *AgentAttributes) GetFreeMemory() *FreeMemory {
	if x != nil {
		return x.FreeMemory
	}
	return nil
}

// *
// A message containing the information about the workload state.
type WorkloadState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName   *WorkloadInstanceName `protobuf:"bytes,1,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	ExecutionState *ExecutionState       `protobuf:"bytes,2,opt,name=executionState,proto3" json:"executionState,omitempty"` /// The workload execution state.
}

func (x *WorkloadState) Reset() {
	*x = WorkloadState{}
	mi := &file_ank_base_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadState) ProtoMessage() {}

func (x *WorkloadState) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadState.ProtoReflect.Descriptor instead.
func (*WorkloadState) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{14}
}

func (x *WorkloadState) GetInstanceName() *WorkloadInstanceName {
	if x != nil {
		return x.InstanceName
	}
	return nil
}

func (x *WorkloadState) GetExecutionState() *ExecutionState {
	if x != nil {
		return x.ExecutionState
	}
	return nil
}

type WorkloadInstanceName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadName string `protobuf:"bytes,1,opt,name=workloadName,proto3" json:"workloadName,omitempty"` /// The name of the workload.
	AgentName    string `protobuf:"bytes,2,opt,name=agentName,proto3" json:"agentName,omitempty"`       /// The name of the owning Agent.
	Id           string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                     // A unique identifier of the workload.
}

func (x *WorkloadInstanceName) Reset() {
	*x = WorkloadInstanceName{}
	mi := &file_ank_base_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadInstanceName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadInstanceName) ProtoMessage() {}

func (x *WorkloadInstanceName) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadInstanceName.ProtoReflect.Descriptor instead.
func (*WorkloadInstanceName) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{15}
}

func (x *WorkloadInstanceName) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *WorkloadInstanceName) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *WorkloadInstanceName) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// *
// A message containing the state information.
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiVersion string       `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"` /// The current version of the API.
	Workloads  *WorkloadMap `protobuf:"bytes,2,opt,name=workloads,proto3" json:"workloads,omitempty"`   /// A mapping from workload names to workload configurations.
	Configs    *ConfigMap   `protobuf:"bytes,3,opt,name=configs,proto3" json:"configs,omitempty"`       /// Configuration values which can be referenced in workload configurations.
}

func (x *State) Reset() {
	*x = State{}
	mi := &file_ank_base_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{16}
}

func (x *State) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *State) GetWorkloads() *WorkloadMap {
	if x != nil {
		return x.Workloads
	}
	return nil
}

func (x *State) GetConfigs() *ConfigMap {
	if x != nil {
		return x.Configs
	}
	return nil
}

// *
// This is a workaround for proto not supporing optional maps
// Workload names shall not be shorter than 1 symbol longer then 63 symbols and can contain only regular characters, digits, the "-" and "_" symbols.
type WorkloadMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workloads map[string]*Workload `protobuf:"bytes,1,rep,name=workloads,proto3" json:"workloads,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WorkloadMap) Reset() {
	*x = WorkloadMap{}
	mi := &file_ank_base_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadMap) ProtoMessage() {}

func (x *WorkloadMap) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadMap.ProtoReflect.Descriptor instead.
func (*WorkloadMap) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{17}
}

func (x *WorkloadMap) GetWorkloads() map[string]*Workload {
	if x != nil {
		return x.Workloads
	}
	return nil
}

// *
// A message containing the configuration of a workload.
type Workload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent                  *string                 `protobuf:"bytes,1,opt,name=agent,proto3,oneof" json:"agent,omitempty"`                                              /// The name of the owning Agent.
	RestartPolicy          *RestartPolicy          `protobuf:"varint,2,opt,name=restartPolicy,proto3,enum=ank_base.RestartPolicy,oneof" json:"restartPolicy,omitempty"` /// An enum value that defines the condition under which a workload is restarted.
	Dependencies           *Dependencies           `protobuf:"bytes,3,opt,name=dependencies,proto3" json:"dependencies,omitempty"`                                      /// A map of workload names and expected states to enable a synchronized start of the workload.
	Tags                   *Tags                   `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`                                                      /// A list of tag names.
	Runtime                *string                 `protobuf:"bytes,5,opt,name=runtime,proto3,oneof" json:"runtime,omitempty"`                                          /// The name of the runtime e.g. podman.
	RuntimeConfig          *string                 `protobuf:"bytes,6,opt,name=runtimeConfig,proto3,oneof" json:"runtimeConfig,omitempty"`                              /// The configuration information specific to the runtime.
	ControlInterfaceAccess *ControlInterfaceAccess `protobuf:"bytes,7,opt,name=controlInterfaceAccess,proto3" json:"controlInterfaceAccess,omitempty"`
	Configs                *ConfigMappings         `protobuf:"bytes,8,opt,name=configs,proto3" json:"configs,omitempty"` /// A mapping containing the configurations assigned to the workload.
}

func (x *Workload) Reset() {
	*x = Workload{}
	mi := &file_ank_base_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workload) ProtoMessage() {}

func (x *Workload) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workload.ProtoReflect.Descriptor instead.
func (*Workload) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{18}
}

func (x *Workload) GetAgent() string {
	if x != nil && x.Agent != nil {
		return *x.Agent
	}
	return ""
}

func (x *Workload) GetRestartPolicy() RestartPolicy {
	if x != nil && x.RestartPolicy != nil {
		return *x.RestartPolicy
	}
	return RestartPolicy_NEVER
}

func (x *Workload) GetDependencies() *Dependencies {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Workload) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Workload) GetRuntime() string {
	if x != nil && x.Runtime != nil {
		return *x.Runtime
	}
	return ""
}

func (x *Workload) GetRuntimeConfig() string {
	if x != nil && x.RuntimeConfig != nil {
		return *x.RuntimeConfig
	}
	return ""
}

func (x *Workload) GetControlInterfaceAccess() *ControlInterfaceAccess {
	if x != nil {
		return x.ControlInterfaceAccess
	}
	return nil
}

func (x *Workload) GetConfigs() *ConfigMappings {
	if x != nil {
		return x.Configs
	}
	return nil
}

// *
// This is a workaround for proto not supporing optional repeated values
type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	mi := &file_ank_base_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{19}
}

func (x *Tags) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// *
// This is a workaround for proto not supporing optional maps
type Dependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependencies map[string]AddCondition `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ank_base.AddCondition"`
}

func (x *Dependencies) Reset() {
	*x = Dependencies{}
	mi := &file_ank_base_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependencies) ProtoMessage() {}

func (x *Dependencies) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependencies.ProtoReflect.Descriptor instead.
func (*Dependencies) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{20}
}

func (x *Dependencies) GetDependencies() map[string]AddCondition {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// *
// A message to store a tag.
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     /// The key of the tag.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` /// The value of the tag.
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_ank_base_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{21}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_ank_base_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{22}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// *
// A message containing the parts of the control interface the workload as authorized to access.
// By default, all access is denied.
// Only if a matching allow rule is found, and no matching deny rules is found, the access is allowed.
type ControlInterfaceAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowRules []*AccessRightsRule `protobuf:"bytes,1,rep,name=allowRules,proto3" json:"allowRules,omitempty"` // Rules allow the access
	DenyRules  []*AccessRightsRule `protobuf:"bytes,2,rep,name=denyRules,proto3" json:"denyRules,omitempty"`   // Rules denying the access
}

func (x *ControlInterfaceAccess) Reset() {
	*x = ControlInterfaceAccess{}
	mi := &file_ank_base_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlInterfaceAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlInterfaceAccess) ProtoMessage() {}

func (x *ControlInterfaceAccess) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlInterfaceAccess.ProtoReflect.Descriptor instead.
func (*ControlInterfaceAccess) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{23}
}

func (x *ControlInterfaceAccess) GetAllowRules() []*AccessRightsRule {
	if x != nil {
		return x.AllowRules
	}
	return nil
}

func (x *ControlInterfaceAccess) GetDenyRules() []*AccessRightsRule {
	if x != nil {
		return x.DenyRules
	}
	return nil
}

// *
// A message containing an allow or deny rule.
type AccessRightsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AccessRightsRuleEnum:
	//
	//	*AccessRightsRule_StateRule
	AccessRightsRuleEnum isAccessRightsRule_AccessRightsRuleEnum `protobuf_oneof:"AccessRightsRuleEnum"`
}

func (x *AccessRightsRule) Reset() {
	*x = AccessRightsRule{}
	mi := &file_ank_base_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRightsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRightsRule) ProtoMessage() {}

func (x *AccessRightsRule) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRightsRule.ProtoReflect.Descriptor instead.
func (*AccessRightsRule) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{24}
}

func (m *AccessRightsRule) GetAccessRightsRuleEnum() isAccessRightsRule_AccessRightsRuleEnum {
	if m != nil {
		return m.AccessRightsRuleEnum
	}
	return nil
}

func (x *AccessRightsRule) GetStateRule() *StateRule {
	if x, ok := x.GetAccessRightsRuleEnum().(*AccessRightsRule_StateRule); ok {
		return x.StateRule
	}
	return nil
}

type isAccessRightsRule_AccessRightsRuleEnum interface {
	isAccessRightsRule_AccessRightsRuleEnum()
}

type AccessRightsRule_StateRule struct {
	StateRule *StateRule `protobuf:"bytes,1,opt,name=stateRule,proto3,oneof"` // Rule for getting or setting the state
}

func (*AccessRightsRule_StateRule) isAccessRightsRule_AccessRightsRuleEnum() {}

// *
// Message containing a rule for getting or setting the state
type StateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation   ReadWriteEnum `protobuf:"varint,1,opt,name=operation,proto3,enum=ank_base.ReadWriteEnum" json:"operation,omitempty"` // Defines which actions are allowed
	FilterMasks []string      `protobuf:"bytes,2,rep,name=filterMasks,proto3" json:"filterMasks,omitempty"`                          // Pathes definind what can be accessed. Segements of path can be a wildcare "*".
}

func (x *StateRule) Reset() {
	*x = StateRule{}
	mi := &file_ank_base_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateRule) ProtoMessage() {}

func (x *StateRule) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateRule.ProtoReflect.Descriptor instead.
func (*StateRule) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{25}
}

func (x *StateRule) GetOperation() ReadWriteEnum {
	if x != nil {
		return x.Operation
	}
	return ReadWriteEnum_RW_NOTHING
}

func (x *StateRule) GetFilterMasks() []string {
	if x != nil {
		return x.FilterMasks
	}
	return nil
}

// *
// This is a workaround for proto not supporing optional maps
type ConfigMappings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs map[string]string `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigMappings) Reset() {
	*x = ConfigMappings{}
	mi := &file_ank_base_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigMappings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMappings) ProtoMessage() {}

func (x *ConfigMappings) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMappings.ProtoReflect.Descriptor instead.
func (*ConfigMappings) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{26}
}

func (x *ConfigMappings) GetConfigs() map[string]string {
	if x != nil {
		return x.Configs
	}
	return nil
}

// *
// This is a workaround for proto not supporing optional maps
type ConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs map[string]*ConfigItem `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigMap) Reset() {
	*x = ConfigMap{}
	mi := &file_ank_base_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMap) ProtoMessage() {}

func (x *ConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMap.ProtoReflect.Descriptor instead.
func (*ConfigMap) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigMap) GetConfigs() map[string]*ConfigItem {
	if x != nil {
		return x.Configs
	}
	return nil
}

// *
// An enum type describing possible configuration objects.
type ConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConfigItem:
	//
	//	*ConfigItem_String_
	//	*ConfigItem_Array
	//	*ConfigItem_Object
	ConfigItem isConfigItem_ConfigItem `protobuf_oneof:"ConfigItem"`
}

func (x *ConfigItem) Reset() {
	*x = ConfigItem{}
	mi := &file_ank_base_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigItem) ProtoMessage() {}

func (x *ConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigItem.ProtoReflect.Descriptor instead.
func (*ConfigItem) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{28}
}

func (m *ConfigItem) GetConfigItem() isConfigItem_ConfigItem {
	if m != nil {
		return m.ConfigItem
	}
	return nil
}

func (x *ConfigItem) GetString_() string {
	if x, ok := x.GetConfigItem().(*ConfigItem_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ConfigItem) GetArray() *ConfigArray {
	if x, ok := x.GetConfigItem().(*ConfigItem_Array); ok {
		return x.Array
	}
	return nil
}

func (x *ConfigItem) GetObject() *ConfigObject {
	if x, ok := x.GetConfigItem().(*ConfigItem_Object); ok {
		return x.Object
	}
	return nil
}

type isConfigItem_ConfigItem interface {
	isConfigItem_ConfigItem()
}

type ConfigItem_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=String,proto3,oneof"`
}

type ConfigItem_Array struct {
	Array *ConfigArray `protobuf:"bytes,2,opt,name=array,proto3,oneof"`
}

type ConfigItem_Object struct {
	Object *ConfigObject `protobuf:"bytes,3,opt,name=object,proto3,oneof"`
}

func (*ConfigItem_String_) isConfigItem_ConfigItem() {}

func (*ConfigItem_Array) isConfigItem_ConfigItem() {}

func (*ConfigItem_Object) isConfigItem_ConfigItem() {}

type ConfigArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ConfigItem `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ConfigArray) Reset() {
	*x = ConfigArray{}
	mi := &file_ank_base_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigArray) ProtoMessage() {}

func (x *ConfigArray) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigArray.ProtoReflect.Descriptor instead.
func (*ConfigArray) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{29}
}

func (x *ConfigArray) GetValues() []*ConfigItem {
	if x != nil {
		return x.Values
	}
	return nil
}

type ConfigObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*ConfigItem `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigObject) Reset() {
	*x = ConfigObject{}
	mi := &file_ank_base_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigObject) ProtoMessage() {}

func (x *ConfigObject) ProtoReflect() protoreflect.Message {
	mi := &file_ank_base_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigObject.ProtoReflect.Descriptor instead.
func (*ConfigObject) Descriptor() ([]byte, []int) {
	return file_ank_base_proto_rawDescGZIP(), []int{30}
}

func (x *ConfigObject) GetFields() map[string]*ConfigItem {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_ank_base_proto protoreflect.FileDescriptor

var file_ank_base_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xf5, 0x01, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x69, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x68, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22,
	0xb5, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e,
	0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x52,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x54, 0x0a,
	0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x1a, 0x66, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x6b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x1a,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x60, 0x0a, 0x0e, 0x77, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x66,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x57, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x77, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x62, 0x0a, 0x13,
	0x57, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc1, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x49, 0x64, 0x2e,
	0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x57, 0x0a, 0x0f, 0x49,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x03, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4b, 0x0a, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x6b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x07,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61,
	0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61,
	0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x0c, 0x6e, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6e,
	0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x61,
	0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x22, 0x98, 0x01, 0x0a, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x36, 0x0a,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x54, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x08, 0x43,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x22, 0x79, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x6b, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x95,
	0x01, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x42, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x8b, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12,
	0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x42,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x70, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x1a, 0x50, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x03, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x6e, 0x6b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x6b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x29, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xb5, 0x01,
	0x0a, 0x0c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x57, 0x0a, 0x11,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x64, 0x65, 0x6e, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x64,
	0x65, 0x6e, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x64, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x6b, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x22,
	0x8d, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x99, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x3a, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x6b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x3b, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4f, 0x0a,
	0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x51,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x44, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x44, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0x16, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x2b, 0x0a, 0x11, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x21, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x2a, 0x6f, 0x0a, 0x07, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x2a, 0x19, 0x0a, 0x07, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x2a, 0x75, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x2a, 0x1d, 0x0a, 0x09,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x2a, 0x45, 0x0a, 0x06, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x54,
	0x10, 0x02, 0x2a, 0x36, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0d, 0x52, 0x65,
	0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x57, 0x5f, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x57, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x57, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x57, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ank_base_proto_rawDescOnce sync.Once
	file_ank_base_proto_rawDescData = file_ank_base_proto_rawDesc
)

func file_ank_base_proto_rawDescGZIP() []byte {
	file_ank_base_proto_rawDescOnce.Do(func() {
		file_ank_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_ank_base_proto_rawDescData)
	})
	return file_ank_base_proto_rawDescData
}

var file_ank_base_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_ank_base_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_ank_base_proto_goTypes = []any{
	(AddCondition)(0),                  // 0: ank_base.AddCondition
	(Removed)(0),                       // 1: ank_base.Removed
	(AgentDisconnected)(0),             // 2: ank_base.AgentDisconnected
	(NotScheduled)(0),                  // 3: ank_base.NotScheduled
	(Pending)(0),                       // 4: ank_base.Pending
	(Running)(0),                       // 5: ank_base.Running
	(Stopping)(0),                      // 6: ank_base.Stopping
	(Succeeded)(0),                     // 7: ank_base.Succeeded
	(Failed)(0),                        // 8: ank_base.Failed
	(RestartPolicy)(0),                 // 9: ank_base.RestartPolicy
	(ReadWriteEnum)(0),                 // 10: ank_base.ReadWriteEnum
	(*Request)(nil),                    // 11: ank_base.Request
	(*Response)(nil),                   // 12: ank_base.Response
	(*CompleteStateRequest)(nil),       // 13: ank_base.CompleteStateRequest
	(*UpdateStateRequest)(nil),         // 14: ank_base.UpdateStateRequest
	(*UpdateStateSuccess)(nil),         // 15: ank_base.UpdateStateSuccess
	(*CompleteState)(nil),              // 16: ank_base.CompleteState
	(*WorkloadStatesMap)(nil),          // 17: ank_base.WorkloadStatesMap
	(*ExecutionsStatesOfWorkload)(nil), // 18: ank_base.ExecutionsStatesOfWorkload
	(*ExecutionsStatesForId)(nil),      // 19: ank_base.ExecutionsStatesForId
	(*ExecutionState)(nil),             // 20: ank_base.ExecutionState
	(*AgentMap)(nil),                   // 21: ank_base.AgentMap
	(*CpuUsage)(nil),                   // 22: ank_base.CpuUsage
	(*FreeMemory)(nil),                 // 23: ank_base.FreeMemory
	(*AgentAttributes)(nil),            // 24: ank_base.AgentAttributes
	(*WorkloadState)(nil),              // 25: ank_base.WorkloadState
	(*WorkloadInstanceName)(nil),       // 26: ank_base.WorkloadInstanceName
	(*State)(nil),                      // 27: ank_base.State
	(*WorkloadMap)(nil),                // 28: ank_base.WorkloadMap
	(*Workload)(nil),                   // 29: ank_base.Workload
	(*Tags)(nil),                       // 30: ank_base.Tags
	(*Dependencies)(nil),               // 31: ank_base.Dependencies
	(*Tag)(nil),                        // 32: ank_base.Tag
	(*Error)(nil),                      // 33: ank_base.Error
	(*ControlInterfaceAccess)(nil),     // 34: ank_base.ControlInterfaceAccess
	(*AccessRightsRule)(nil),           // 35: ank_base.AccessRightsRule
	(*StateRule)(nil),                  // 36: ank_base.StateRule
	(*ConfigMappings)(nil),             // 37: ank_base.ConfigMappings
	(*ConfigMap)(nil),                  // 38: ank_base.ConfigMap
	(*ConfigItem)(nil),                 // 39: ank_base.ConfigItem
	(*ConfigArray)(nil),                // 40: ank_base.ConfigArray
	(*ConfigObject)(nil),               // 41: ank_base.ConfigObject
	nil,                                // 42: ank_base.WorkloadStatesMap.AgentStateMapEntry
	nil,                                // 43: ank_base.ExecutionsStatesOfWorkload.WlNameStateMapEntry
	nil,                                // 44: ank_base.ExecutionsStatesForId.IdStateMapEntry
	nil,                                // 45: ank_base.AgentMap.AgentsEntry
	nil,                                // 46: ank_base.WorkloadMap.WorkloadsEntry
	nil,                                // 47: ank_base.Dependencies.DependenciesEntry
	nil,                                // 48: ank_base.ConfigMappings.ConfigsEntry
	nil,                                // 49: ank_base.ConfigMap.ConfigsEntry
	nil,                                // 50: ank_base.ConfigObject.FieldsEntry
}
var file_ank_base_proto_depIdxs = []int32{
	14, // 0: ank_base.Request.updateStateRequest:type_name -> ank_base.UpdateStateRequest
	13, // 1: ank_base.Request.completeStateRequest:type_name -> ank_base.CompleteStateRequest
	33, // 2: ank_base.Response.error:type_name -> ank_base.Error
	16, // 3: ank_base.Response.completeState:type_name -> ank_base.CompleteState
	15, // 4: ank_base.Response.UpdateStateSuccess:type_name -> ank_base.UpdateStateSuccess
	16, // 5: ank_base.UpdateStateRequest.newState:type_name -> ank_base.CompleteState
	27, // 6: ank_base.CompleteState.desiredState:type_name -> ank_base.State
	17, // 7: ank_base.CompleteState.workloadStates:type_name -> ank_base.WorkloadStatesMap
	21, // 8: ank_base.CompleteState.agents:type_name -> ank_base.AgentMap
	42, // 9: ank_base.WorkloadStatesMap.agentStateMap:type_name -> ank_base.WorkloadStatesMap.AgentStateMapEntry
	43, // 10: ank_base.ExecutionsStatesOfWorkload.wlNameStateMap:type_name -> ank_base.ExecutionsStatesOfWorkload.WlNameStateMapEntry
	44, // 11: ank_base.ExecutionsStatesForId.idStateMap:type_name -> ank_base.ExecutionsStatesForId.IdStateMapEntry
	2,  // 12: ank_base.ExecutionState.agentDisconnected:type_name -> ank_base.AgentDisconnected
	4,  // 13: ank_base.ExecutionState.pending:type_name -> ank_base.Pending
	5,  // 14: ank_base.ExecutionState.running:type_name -> ank_base.Running
	6,  // 15: ank_base.ExecutionState.stopping:type_name -> ank_base.Stopping
	7,  // 16: ank_base.ExecutionState.succeeded:type_name -> ank_base.Succeeded
	8,  // 17: ank_base.ExecutionState.failed:type_name -> ank_base.Failed
	3,  // 18: ank_base.ExecutionState.notScheduled:type_name -> ank_base.NotScheduled
	1,  // 19: ank_base.ExecutionState.removed:type_name -> ank_base.Removed
	45, // 20: ank_base.AgentMap.agents:type_name -> ank_base.AgentMap.AgentsEntry
	22, // 21: ank_base.AgentAttributes.cpu_usage:type_name -> ank_base.CpuUsage
	23, // 22: ank_base.AgentAttributes.free_memory:type_name -> ank_base.FreeMemory
	26, // 23: ank_base.WorkloadState.instanceName:type_name -> ank_base.WorkloadInstanceName
	20, // 24: ank_base.WorkloadState.executionState:type_name -> ank_base.ExecutionState
	28, // 25: ank_base.State.workloads:type_name -> ank_base.WorkloadMap
	38, // 26: ank_base.State.configs:type_name -> ank_base.ConfigMap
	46, // 27: ank_base.WorkloadMap.workloads:type_name -> ank_base.WorkloadMap.WorkloadsEntry
	9,  // 28: ank_base.Workload.restartPolicy:type_name -> ank_base.RestartPolicy
	31, // 29: ank_base.Workload.dependencies:type_name -> ank_base.Dependencies
	30, // 30: ank_base.Workload.tags:type_name -> ank_base.Tags
	34, // 31: ank_base.Workload.controlInterfaceAccess:type_name -> ank_base.ControlInterfaceAccess
	37, // 32: ank_base.Workload.configs:type_name -> ank_base.ConfigMappings
	32, // 33: ank_base.Tags.tags:type_name -> ank_base.Tag
	47, // 34: ank_base.Dependencies.dependencies:type_name -> ank_base.Dependencies.DependenciesEntry
	35, // 35: ank_base.ControlInterfaceAccess.allowRules:type_name -> ank_base.AccessRightsRule
	35, // 36: ank_base.ControlInterfaceAccess.denyRules:type_name -> ank_base.AccessRightsRule
	36, // 37: ank_base.AccessRightsRule.stateRule:type_name -> ank_base.StateRule
	10, // 38: ank_base.StateRule.operation:type_name -> ank_base.ReadWriteEnum
	48, // 39: ank_base.ConfigMappings.configs:type_name -> ank_base.ConfigMappings.ConfigsEntry
	49, // 40: ank_base.ConfigMap.configs:type_name -> ank_base.ConfigMap.ConfigsEntry
	40, // 41: ank_base.ConfigItem.array:type_name -> ank_base.ConfigArray
	41, // 42: ank_base.ConfigItem.object:type_name -> ank_base.ConfigObject
	39, // 43: ank_base.ConfigArray.values:type_name -> ank_base.ConfigItem
	50, // 44: ank_base.ConfigObject.fields:type_name -> ank_base.ConfigObject.FieldsEntry
	18, // 45: ank_base.WorkloadStatesMap.AgentStateMapEntry.value:type_name -> ank_base.ExecutionsStatesOfWorkload
	19, // 46: ank_base.ExecutionsStatesOfWorkload.WlNameStateMapEntry.value:type_name -> ank_base.ExecutionsStatesForId
	20, // 47: ank_base.ExecutionsStatesForId.IdStateMapEntry.value:type_name -> ank_base.ExecutionState
	24, // 48: ank_base.AgentMap.AgentsEntry.value:type_name -> ank_base.AgentAttributes
	29, // 49: ank_base.WorkloadMap.WorkloadsEntry.value:type_name -> ank_base.Workload
	0,  // 50: ank_base.Dependencies.DependenciesEntry.value:type_name -> ank_base.AddCondition
	39, // 51: ank_base.ConfigMap.ConfigsEntry.value:type_name -> ank_base.ConfigItem
	39, // 52: ank_base.ConfigObject.FieldsEntry.value:type_name -> ank_base.ConfigItem
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_ank_base_proto_init() }
func file_ank_base_proto_init() {
	if File_ank_base_proto != nil {
		return
	}
	file_ank_base_proto_msgTypes[0].OneofWrappers = []any{
		(*Request_UpdateStateRequest)(nil),
		(*Request_CompleteStateRequest)(nil),
	}
	file_ank_base_proto_msgTypes[1].OneofWrappers = []any{
		(*Response_Error)(nil),
		(*Response_CompleteState)(nil),
		(*Response_UpdateStateSuccess)(nil),
	}
	file_ank_base_proto_msgTypes[9].OneofWrappers = []any{
		(*ExecutionState_AgentDisconnected)(nil),
		(*ExecutionState_Pending)(nil),
		(*ExecutionState_Running)(nil),
		(*ExecutionState_Stopping)(nil),
		(*ExecutionState_Succeeded)(nil),
		(*ExecutionState_Failed)(nil),
		(*ExecutionState_NotScheduled)(nil),
		(*ExecutionState_Removed)(nil),
	}
	file_ank_base_proto_msgTypes[18].OneofWrappers = []any{}
	file_ank_base_proto_msgTypes[24].OneofWrappers = []any{
		(*AccessRightsRule_StateRule)(nil),
	}
	file_ank_base_proto_msgTypes[28].OneofWrappers = []any{
		(*ConfigItem_String_)(nil),
		(*ConfigItem_Array)(nil),
		(*ConfigItem_Object)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ank_base_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ank_base_proto_goTypes,
		DependencyIndexes: file_ank_base_proto_depIdxs,
		EnumInfos:         file_ank_base_proto_enumTypes,
		MessageInfos:      file_ank_base_proto_msgTypes,
	}.Build()
	File_ank_base_proto = out.File
	file_ank_base_proto_rawDesc = nil
	file_ank_base_proto_goTypes = nil
	file_ank_base_proto_depIdxs = nil
}
