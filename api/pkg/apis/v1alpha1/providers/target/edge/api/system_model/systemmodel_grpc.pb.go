// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: system_model/systemmodel.proto

package system_model

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemModel_ListDevices_FullMethodName        = "/SystemModelProvider.SystemModel/ListDevices"
	SystemModel_ListAppInstances_FullMethodName   = "/SystemModelProvider.SystemModel/ListAppInstances"
	SystemModel_GetDesiredState_FullMethodName    = "/SystemModelProvider.SystemModel/GetDesiredState"
	SystemModel_GetAppInstanceById_FullMethodName = "/SystemModelProvider.SystemModel/GetAppInstanceById"
	SystemModel_GetDeviceById_FullMethodName      = "/SystemModelProvider.SystemModel/GetDeviceById"
)

// SystemModelClient is the client API for SystemModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemModelClient interface {
	ListDevices(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Device], error)
	ListAppInstances(ctx context.Context, in *ListAppRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AppInstance], error)
	GetDesiredState(ctx context.Context, in *DesiredStateRequest, opts ...grpc.CallOption) (*DesiredStateResponse, error)
	GetAppInstanceById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*AppInstance, error)
	GetDeviceById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Device, error)
}

type systemModelClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemModelClient(cc grpc.ClientConnInterface) SystemModelClient {
	return &systemModelClient{cc}
}

func (c *systemModelClient) ListDevices(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Device], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SystemModel_ServiceDesc.Streams[0], SystemModel_ListDevices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListDeviceRequest, Device]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemModel_ListDevicesClient = grpc.ServerStreamingClient[Device]

func (c *systemModelClient) ListAppInstances(ctx context.Context, in *ListAppRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AppInstance], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SystemModel_ServiceDesc.Streams[1], SystemModel_ListAppInstances_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListAppRequest, AppInstance]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemModel_ListAppInstancesClient = grpc.ServerStreamingClient[AppInstance]

func (c *systemModelClient) GetDesiredState(ctx context.Context, in *DesiredStateRequest, opts ...grpc.CallOption) (*DesiredStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DesiredStateResponse)
	err := c.cc.Invoke(ctx, SystemModel_GetDesiredState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemModelClient) GetAppInstanceById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*AppInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppInstance)
	err := c.cc.Invoke(ctx, SystemModel_GetAppInstanceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemModelClient) GetDeviceById(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, SystemModel_GetDeviceById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemModelServer is the server API for SystemModel service.
// All implementations should embed UnimplementedSystemModelServer
// for forward compatibility.
type SystemModelServer interface {
	ListDevices(*ListDeviceRequest, grpc.ServerStreamingServer[Device]) error
	ListAppInstances(*ListAppRequest, grpc.ServerStreamingServer[AppInstance]) error
	GetDesiredState(context.Context, *DesiredStateRequest) (*DesiredStateResponse, error)
	GetAppInstanceById(context.Context, *wrapperspb.StringValue) (*AppInstance, error)
	GetDeviceById(context.Context, *wrapperspb.StringValue) (*Device, error)
}

// UnimplementedSystemModelServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemModelServer struct{}

func (UnimplementedSystemModelServer) ListDevices(*ListDeviceRequest, grpc.ServerStreamingServer[Device]) error {
	return status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedSystemModelServer) ListAppInstances(*ListAppRequest, grpc.ServerStreamingServer[AppInstance]) error {
	return status.Errorf(codes.Unimplemented, "method ListAppInstances not implemented")
}
func (UnimplementedSystemModelServer) GetDesiredState(context.Context, *DesiredStateRequest) (*DesiredStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesiredState not implemented")
}
func (UnimplementedSystemModelServer) GetAppInstanceById(context.Context, *wrapperspb.StringValue) (*AppInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInstanceById not implemented")
}
func (UnimplementedSystemModelServer) GetDeviceById(context.Context, *wrapperspb.StringValue) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceById not implemented")
}
func (UnimplementedSystemModelServer) testEmbeddedByValue() {}

// UnsafeSystemModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemModelServer will
// result in compilation errors.
type UnsafeSystemModelServer interface {
	mustEmbedUnimplementedSystemModelServer()
}

func RegisterSystemModelServer(s grpc.ServiceRegistrar, srv SystemModelServer) {
	// If the following call pancis, it indicates UnimplementedSystemModelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemModel_ServiceDesc, srv)
}

func _SystemModel_ListDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDeviceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemModelServer).ListDevices(m, &grpc.GenericServerStream[ListDeviceRequest, Device]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemModel_ListDevicesServer = grpc.ServerStreamingServer[Device]

func _SystemModel_ListAppInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAppRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemModelServer).ListAppInstances(m, &grpc.GenericServerStream[ListAppRequest, AppInstance]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemModel_ListAppInstancesServer = grpc.ServerStreamingServer[AppInstance]

func _SystemModel_GetDesiredState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesiredStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemModelServer).GetDesiredState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemModel_GetDesiredState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemModelServer).GetDesiredState(ctx, req.(*DesiredStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemModel_GetAppInstanceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemModelServer).GetAppInstanceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemModel_GetAppInstanceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemModelServer).GetAppInstanceById(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemModel_GetDeviceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemModelServer).GetDeviceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemModel_GetDeviceById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemModelServer).GetDeviceById(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemModel_ServiceDesc is the grpc.ServiceDesc for SystemModel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemModel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SystemModelProvider.SystemModel",
	HandlerType: (*SystemModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDesiredState",
			Handler:    _SystemModel_GetDesiredState_Handler,
		},
		{
			MethodName: "GetAppInstanceById",
			Handler:    _SystemModel_GetAppInstanceById_Handler,
		},
		{
			MethodName: "GetDeviceById",
			Handler:    _SystemModel_GetDeviceById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDevices",
			Handler:       _SystemModel_ListDevices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAppInstances",
			Handler:       _SystemModel_ListAppInstances_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "system_model/systemmodel.proto",
}
