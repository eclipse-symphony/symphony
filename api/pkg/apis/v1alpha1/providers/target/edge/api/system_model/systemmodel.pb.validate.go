// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system_model/systemmodel.proto

package system_model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DesiredStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DesiredStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DesiredStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DesiredStateRequestMultiError, or nil if none found.
func (m *DesiredStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DesiredStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DesiredStateRequestMultiError(errors)
	}

	return nil
}

// DesiredStateRequestMultiError is an error wrapping multiple validation
// errors returned by DesiredStateRequest.ValidateAll() if the designated
// constraints aren't met.
type DesiredStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DesiredStateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DesiredStateRequestMultiError) AllErrors() []error { return m }

// DesiredStateRequestValidationError is the validation error returned by
// DesiredStateRequest.Validate if the designated constraints aren't met.
type DesiredStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredStateRequestValidationError) ErrorName() string {
	return "DesiredStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DesiredStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredStateRequestValidationError{}

// Validate checks the field values on ListDeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeviceRequestMultiError, or nil if none found.
func (m *ListDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDeviceRequestMultiError(errors)
	}

	return nil
}

// ListDeviceRequestMultiError is an error wrapping multiple validation errors
// returned by ListDeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeviceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeviceRequestMultiError) AllErrors() []error { return m }

// ListDeviceRequestValidationError is the validation error returned by
// ListDeviceRequest.Validate if the designated constraints aren't met.
type ListDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeviceRequestValidationError) ErrorName() string {
	return "ListDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeviceRequestValidationError{}

// Validate checks the field values on ListAppRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAppRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListAppRequestMultiError,
// or nil if none found.
func (m *ListAppRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAppRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAppRequestMultiError(errors)
	}

	return nil
}

// ListAppRequestMultiError is an error wrapping multiple validation errors
// returned by ListAppRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAppRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAppRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAppRequestMultiError) AllErrors() []error { return m }

// ListAppRequestValidationError is the validation error returned by
// ListAppRequest.Validate if the designated constraints aren't met.
type ListAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppRequestValidationError) ErrorName() string { return "ListAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppRequestValidationError{}

// Validate checks the field values on DesiredStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DesiredStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DesiredStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DesiredStateResponseMultiError, or nil if none found.
func (m *DesiredStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DesiredStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DesiredStateResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DesiredStateResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DesiredStateResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DesiredStateResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DesiredStateResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DesiredStateResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DesiredStateResponseMultiError(errors)
	}

	return nil
}

// DesiredStateResponseMultiError is an error wrapping multiple validation
// errors returned by DesiredStateResponse.ValidateAll() if the designated
// constraints aren't met.
type DesiredStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DesiredStateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DesiredStateResponseMultiError) AllErrors() []error { return m }

// DesiredStateResponseValidationError is the validation error returned by
// DesiredStateResponse.Validate if the designated constraints aren't met.
type DesiredStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredStateResponseValidationError) ErrorName() string {
	return "DesiredStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DesiredStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredStateResponseValidationError{}

// Validate checks the field values on AppInstanceStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppInstanceStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppInstanceStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppInstanceStatusMultiError, or nil if none found.
func (m *AppInstanceStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *AppInstanceStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for TimeStamp

	// no validation rules for RunningHost

	// no validation rules for InterlinkStatus

	if len(errors) > 0 {
		return AppInstanceStatusMultiError(errors)
	}

	return nil
}

// AppInstanceStatusMultiError is an error wrapping multiple validation errors
// returned by AppInstanceStatus.ValidateAll() if the designated constraints
// aren't met.
type AppInstanceStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppInstanceStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppInstanceStatusMultiError) AllErrors() []error { return m }

// AppInstanceStatusValidationError is the validation error returned by
// AppInstanceStatus.Validate if the designated constraints aren't met.
type AppInstanceStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInstanceStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInstanceStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInstanceStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInstanceStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInstanceStatusValidationError) ErrorName() string {
	return "AppInstanceStatusValidationError"
}

// Error satisfies the builtin error interface
func (e AppInstanceStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInstanceStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInstanceStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInstanceStatusValidationError{}

// Validate checks the field values on DeviceStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceStatusMultiError, or
// nil if none found.
func (m *DeviceStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for TimeStamp

	// no validation rules for InterlinkStatus

	// no validation rules for NtpStatus

	// no validation rules for Authenticated

	if len(errors) > 0 {
		return DeviceStatusMultiError(errors)
	}

	return nil
}

// DeviceStatusMultiError is an error wrapping multiple validation errors
// returned by DeviceStatus.ValidateAll() if the designated constraints aren't met.
type DeviceStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStatusMultiError) AllErrors() []error { return m }

// DeviceStatusValidationError is the validation error returned by
// DeviceStatus.Validate if the designated constraints aren't met.
type DeviceStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStatusValidationError) ErrorName() string { return "DeviceStatusValidationError" }

// Error satisfies the builtin error interface
func (e DeviceStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStatusValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uuid

	// no validation rules for Labels

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on ContainerNetwork with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContainerNetwork) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerNetwork with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerNetworkMultiError, or nil if none found.
func (m *ContainerNetwork) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerNetwork) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ipv6

	// no validation rules for Ipv4

	// no validation rules for NetworkId

	if len(errors) > 0 {
		return ContainerNetworkMultiError(errors)
	}

	return nil
}

// ContainerNetworkMultiError is an error wrapping multiple validation errors
// returned by ContainerNetwork.ValidateAll() if the designated constraints
// aren't met.
type ContainerNetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerNetworkMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerNetworkMultiError) AllErrors() []error { return m }

// ContainerNetworkValidationError is the validation error returned by
// ContainerNetwork.Validate if the designated constraints aren't met.
type ContainerNetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerNetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerNetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerNetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerNetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerNetworkValidationError) ErrorName() string { return "ContainerNetworkValidationError" }

// Error satisfies the builtin error interface
func (e ContainerNetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerNetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerNetworkValidationError{}

// Validate checks the field values on Limits with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Limits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Limits with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LimitsMultiError, or nil if none found.
func (m *Limits) ValidateAll() error {
	return m.validate(true)
}

func (m *Limits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Memory

	// no validation rules for Cpus

	if len(errors) > 0 {
		return LimitsMultiError(errors)
	}

	return nil
}

// LimitsMultiError is an error wrapping multiple validation errors returned by
// Limits.ValidateAll() if the designated constraints aren't met.
type LimitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LimitsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LimitsMultiError) AllErrors() []error { return m }

// LimitsValidationError is the validation error returned by Limits.Validate if
// the designated constraints aren't met.
type LimitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LimitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LimitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LimitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LimitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LimitsValidationError) ErrorName() string { return "LimitsValidationError" }

// Error satisfies the builtin error interface
func (e LimitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLimits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LimitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LimitsValidationError{}

// Validate checks the field values on Resources with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resources with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourcesMultiError, or nil
// if none found.
func (m *Resources) ValidateAll() error {
	return m.validate(true)
}

func (m *Resources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLimits()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourcesValidationError{
					field:  "Limits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourcesValidationError{
					field:  "Limits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLimits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourcesValidationError{
				field:  "Limits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourcesMultiError(errors)
	}

	return nil
}

// ResourcesMultiError is an error wrapping multiple validation errors returned
// by Resources.ValidateAll() if the designated constraints aren't met.
type ResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesMultiError) AllErrors() []error { return m }

// ResourcesValidationError is the validation error returned by
// Resources.Validate if the designated constraints aren't met.
type ResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesValidationError) ErrorName() string { return "ResourcesValidationError" }

// Error satisfies the builtin error interface
func (e ResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerMultiError, or nil
// if none found.
func (m *Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	for idx, item := range m.GetNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerValidationError{
						field:  fmt.Sprintf("Networks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerValidationError{
						field:  fmt.Sprintf("Networks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerValidationError{
					field:  fmt.Sprintf("Networks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContainerMultiError(errors)
	}

	return nil
}

// ContainerMultiError is an error wrapping multiple validation errors returned
// by Container.ValidateAll() if the designated constraints aren't met.
type ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerMultiError) AllErrors() []error { return m }

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on Affinity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Affinity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Affinity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AffinityMultiError, or nil
// if none found.
func (m *Affinity) ValidateAll() error {
	return m.validate(true)
}

func (m *Affinity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AffinityMultiError(errors)
	}

	return nil
}

// AffinityMultiError is an error wrapping multiple validation errors returned
// by Affinity.ValidateAll() if the designated constraints aren't met.
type AffinityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AffinityMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AffinityMultiError) AllErrors() []error { return m }

// AffinityValidationError is the validation error returned by
// Affinity.Validate if the designated constraints aren't met.
type AffinityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AffinityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AffinityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AffinityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AffinityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AffinityValidationError) ErrorName() string { return "AffinityValidationError" }

// Error satisfies the builtin error interface
func (e AffinityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAffinity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AffinityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AffinityValidationError{}

// Validate checks the field values on AppInstanceSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AppInstanceSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppInstanceSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AppInstanceSpecMultiError, or nil if none found.
func (m *AppInstanceSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *AppInstanceSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAffinity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppInstanceSpecValidationError{
					field:  "Affinity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppInstanceSpecValidationError{
					field:  "Affinity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAffinity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppInstanceSpecValidationError{
				field:  "Affinity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Data.(type) {
	case *AppInstanceSpec_Container:
		if v == nil {
			err := AppInstanceSpecValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppInstanceSpecValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppInstanceSpecValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppInstanceSpecValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AppInstanceSpec_Blob:
		if v == nil {
			err := AppInstanceSpecValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Blob
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AppInstanceSpecMultiError(errors)
	}

	return nil
}

// AppInstanceSpecMultiError is an error wrapping multiple validation errors
// returned by AppInstanceSpec.ValidateAll() if the designated constraints
// aren't met.
type AppInstanceSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppInstanceSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppInstanceSpecMultiError) AllErrors() []error { return m }

// AppInstanceSpecValidationError is the validation error returned by
// AppInstanceSpec.Validate if the designated constraints aren't met.
type AppInstanceSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInstanceSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInstanceSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInstanceSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInstanceSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInstanceSpecValidationError) ErrorName() string { return "AppInstanceSpecValidationError" }

// Error satisfies the builtin error interface
func (e AppInstanceSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInstanceSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInstanceSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInstanceSpecValidationError{}

// Validate checks the field values on AppInstance with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppInstance with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppInstanceMultiError, or
// nil if none found.
func (m *AppInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *AppInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppInstanceValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppInstanceValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppInstanceValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppInstanceValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppInstanceValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppInstanceValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppInstanceValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppInstanceValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppInstanceValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Deleted

	// no validation rules for Paused

	if len(errors) > 0 {
		return AppInstanceMultiError(errors)
	}

	return nil
}

// AppInstanceMultiError is an error wrapping multiple validation errors
// returned by AppInstance.ValidateAll() if the designated constraints aren't met.
type AppInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppInstanceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppInstanceMultiError) AllErrors() []error { return m }

// AppInstanceValidationError is the validation error returned by
// AppInstance.Validate if the designated constraints aren't met.
type AppInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInstanceValidationError) ErrorName() string { return "AppInstanceValidationError" }

// Error satisfies the builtin error interface
func (e AppInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInstanceValidationError{}

// Validate checks the field values on DeviceContainerNetwork with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceContainerNetwork) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceContainerNetwork with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceContainerNetworkMultiError, or nil if none found.
func (m *DeviceContainerNetwork) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceContainerNetwork) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NetworkId

	// no validation rules for Subnet

	// no validation rules for Gateway

	// no validation rules for NicName

	// no validation rules for Type

	if len(errors) > 0 {
		return DeviceContainerNetworkMultiError(errors)
	}

	return nil
}

// DeviceContainerNetworkMultiError is an error wrapping multiple validation
// errors returned by DeviceContainerNetwork.ValidateAll() if the designated
// constraints aren't met.
type DeviceContainerNetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceContainerNetworkMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceContainerNetworkMultiError) AllErrors() []error { return m }

// DeviceContainerNetworkValidationError is the validation error returned by
// DeviceContainerNetwork.Validate if the designated constraints aren't met.
type DeviceContainerNetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceContainerNetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceContainerNetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceContainerNetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceContainerNetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceContainerNetworkValidationError) ErrorName() string {
	return "DeviceContainerNetworkValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceContainerNetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceContainerNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceContainerNetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceContainerNetworkValidationError{}

// Validate checks the field values on DeviceNetwork with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceNetwork) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceNetwork with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceNetworkMultiError, or
// nil if none found.
func (m *DeviceNetwork) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceNetwork) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NetName

	// no validation rules for NicName

	// no validation rules for RedundancyMode

	// no validation rules for Ipv4

	// no validation rules for Gateway

	if len(errors) > 0 {
		return DeviceNetworkMultiError(errors)
	}

	return nil
}

// DeviceNetworkMultiError is an error wrapping multiple validation errors
// returned by DeviceNetwork.ValidateAll() if the designated constraints
// aren't met.
type DeviceNetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceNetworkMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceNetworkMultiError) AllErrors() []error { return m }

// DeviceNetworkValidationError is the validation error returned by
// DeviceNetwork.Validate if the designated constraints aren't met.
type DeviceNetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceNetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceNetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceNetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceNetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceNetworkValidationError) ErrorName() string { return "DeviceNetworkValidationError" }

// Error satisfies the builtin error interface
func (e DeviceNetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceNetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceNetworkValidationError{}

// Validate checks the field values on DeviceSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceSpecMultiError, or
// nil if none found.
func (m *DeviceSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceSpecValidationError{
						field:  fmt.Sprintf("Networks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceSpecValidationError{
						field:  fmt.Sprintf("Networks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceSpecValidationError{
					field:  fmt.Sprintf("Networks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetContainerNetworks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceSpecValidationError{
						field:  fmt.Sprintf("ContainerNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceSpecValidationError{
						field:  fmt.Sprintf("ContainerNetworks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceSpecValidationError{
					field:  fmt.Sprintf("ContainerNetworks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ReservedAppInterlinkIp

	if len(errors) > 0 {
		return DeviceSpecMultiError(errors)
	}

	return nil
}

// DeviceSpecMultiError is an error wrapping multiple validation errors
// returned by DeviceSpec.ValidateAll() if the designated constraints aren't met.
type DeviceSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceSpecMultiError) AllErrors() []error { return m }

// DeviceSpecValidationError is the validation error returned by
// DeviceSpec.Validate if the designated constraints aren't met.
type DeviceSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceSpecValidationError) ErrorName() string { return "DeviceSpecValidationError" }

// Error satisfies the builtin error interface
func (e DeviceSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceSpecValidationError{}

// Validate checks the field values on TimeSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeSettingMultiError, or
// nil if none found.
func (m *TimeSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TimeSettingMultiError(errors)
	}

	return nil
}

// TimeSettingMultiError is an error wrapping multiple validation errors
// returned by TimeSetting.ValidateAll() if the designated constraints aren't met.
type TimeSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSettingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSettingMultiError) AllErrors() []error { return m }

// TimeSettingValidationError is the validation error returned by
// TimeSetting.Validate if the designated constraints aren't met.
type TimeSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSettingValidationError) ErrorName() string { return "TimeSettingValidationError" }

// Error satisfies the builtin error interface
func (e TimeSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSettingValidationError{}

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "TimeSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "TimeSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "TimeSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Deleted

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}

	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}
