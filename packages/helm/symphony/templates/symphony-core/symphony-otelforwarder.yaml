{{- if and .Values.otlpLogsEndpointGrpc .Values.observability.otelForwarder.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "symphony.fullname" . }}-otel-forwarder-config
  namespace: {{ .Release.Namespace }}
data:
  otel-forwarder-config.yaml: |
    receivers:
      # Data sources: traces, metrics, logs
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      filelog:
        resource:
          microsoft.resourceId: "{{ .Values.Azure.Extension.ResourceId }}"
        include:
          - /var/log/containers/symphony-controller-manager*_{{ .Release.Namespace }}_*.log
          - /var/log/containers/symphony-api*_{{ .Release.Namespace }}_*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex:
              '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)
              ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999Z07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex:
              '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)
              ?(?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.+?\/containers\/(?P<pod_name>[a-z0-9]([-a-z0-9]*[a-z0-9])?([a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?P<namespace>[^_]+)_(?P<container_name>.+)-(?P<docker_id>[a-z0-9]{64})\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128 # default maximum amount of Pods per Node is 110
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          # Decide whether to try to treat the log body as json or not
          - type: router
            id: process
            routes:
            - output: json_parser
              expr: attributes.log matches "^{"
            default: text_parser
          # This branch means it's not a json log, so just copy the msg field as the body
          - type: copy
            id: text_parser
            from: attributes.log
            to: body
            output: noop
          # This branch means it is a json log, so parse it
          - type: json_parser
            parse_from: attributes.log
            parse_to: body
            on_error: send
            output: start_retrieving
          - type: move
            id: start_retrieving
            if: 'body["caller"] != nil'
            from: body["caller"]
            to: attributes["caller"]
          - type: move
            if: 'body["level"] != nil'
            from: body["level"]
            to: attributes["level"]
          - type: move
            if: 'body["scope"] != nil'
            from: body["scope"]
            to: attributes["scope"]
          - type: move
            if: 'body["time"] != nil'
            from: body["time"]
            to: attributes["log.time"]
          - type: move
            if: 'body["ver"] != nil'
            from: body["ver"]
            to: attributes["ver"]
          - type: move
            if: 'body["activity"] != nil'
            from: body["activity"]
            to: attributes["activity"]
          - type: move
            if: 'body["diagnostics"] != nil'
            from: body["diagnostics"]
            to: attributes["diagnostics"]
          - type: router
            id: process_diagnostics
            routes:
              - output: diagnostics_parser
                expr: attributes["diagnostics"] != nil
            default: process_activity
          - type: trace_parser
            id: diagnostics_parser
            trace_id:
              parse_from: attributes["diagnostics"]["traceContext"]["traceId"]
            span_id:
              parse_from: attributes["diagnostics"]["traceContext"]["spanId"]
          - type: copy
            if: 'attributes["diagnostics"] != nil'
            from: attributes["diagnostics"]["resourceId"]
            to: attributes["cloud_resourceId"]
          - type: copy
            if: 'attributes["diagnostics"] != nil'
            from: attributes["diagnostics"]["correlationId"]
            to: attributes["correlationId"]
          - type: remove
            if: 'attributes["diagnostics"] != nil'
            field: attributes["diagnostics"]
          - type: router
            id: process_activity
            routes:
              - output: activity_parser
                expr: attributes["activity"] != nil
            default: parse_stacktrace
          - type: move
            id: activity_parser
            if: 'attributes["activity"] != nil'
            from: attributes["activity"]["operationName"]
            to: attributes["operationName"]
          - type: move
            if: 'attributes["activity"] != nil'
            from: attributes["activity"]["resourceId"]
            to: attributes["cloud_resourceId"]
          - type: move
            if: 'attributes["activity"] != nil'
            from: attributes["activity"]["location"]
            to: attributes["location"]
          - type: move
            if: 'attributes["activity"] != nil'
            from: attributes["activity"]["category"]
            to: attributes["category"]
          - type: move
            if: 'attributes["activity"] != nil'
            from: attributes["activity"]["properties"]
            to: attributes["properties"]
          - type: move
            if: 'attributes["activity"] != nil'
            from: attributes["activity"]["correlationId"]
            to: attributes["correlationId"]
          - type: remove
            if: 'attributes["activity"] != nil'
            field: attributes["activity"]
          - type: move
            id: parse_stacktrace
            if: 'body["stacktrace"] != nil'
            from: body["stacktrace"]
            to: attributes["stacktrace"]
          - type: move
            if: 'body["msg"] != nil'
            from: body["msg"]
            to: body
          - type: noop

    processors:
      k8sattributes:
        filter:
          node_from_env_var: KUBE_NODE_NAME
        pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
          - sources:
            - from: resource_attribute
              name: k8s.container.name
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.start_time
            - k8s.deployment.name
            - k8s.node.name
            - container.image.name
            - container.image.tag
      resource/rename:
        attributes:
          - key: k8s_container_name
            action: upsert
            from_attribute: k8s.container.name
          - key: k8s_namespace_name
            action: upsert
            from_attribute: k8s.namespace.name
          - key: k8s_pod_name
            action: upsert
            from_attribute: k8s.pod.name
          - key: k8s_pod_start_time
            action: upsert
            from_attribute: k8s.pod.start_time
          - key: k8s_deployment_name
            action: upsert
            from_attribute: k8s.deployment.name
          - key: k8s_node_name
            action: upsert
            from_attribute: k8s.node.name
          - key: container_image_name
            action: upsert
            from_attribute: container.image.name
          - key: container_image_tag
            action: upsert
            from_attribute: container.image.tag
          - key: k8s.pod.name
            action: delete
          - key: k8s.pod.start_time
            action: delete
          - key: k8s.deployment.name
            action: delete
          - key: k8s.node.name
            action: delete
          - key: container.image.name
            action: delete
          - key: container.image.tag
            action: delete
          - key: k8s.container.name
            action: delete
          - key: k8s.namespace.name
            action: delete

      batch:
      memory_limiter:
        # 80% of maximum memory up to 2G
        limit_mib: 1500
        # 25% of limit up to 2G
        spike_limit_mib: 512
        check_interval: 5s

      filter/userAudits:
        logs:
          log_record:
            # - 'not IsMatch(attributes["log"], "^.*activity.*$")'
            - attributes["type"] == nil or attributes["type"] != "userAudits"
      filter/userDiagnostics:
        logs:
          log_record:
            # - 'not IsMatch(attributes["log"], "^.*diagnostics.*$")'
            - attributes["type"] == nil or attributes["type"] != "userDiagnostics"

      transform/userAudits:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              - set(instrumentation_scope.name, "userAudits")

      transform/userDiagnostics:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              - set(instrumentation_scope.name, "userDiagnostics")
    
    exporters:
      otlp/userAudits:
        endpoint: "{{ .Values.otlpLogsEndpointGrpc }}"
        tls:
          insecure: {{ .Values.otlpInsecureGrpc }}
      otlp/userDiagnostics:
        endpoint: "{{ .Values.otlpLogsEndpointGrpc }}"
        tls:
          insecure: {{ .Values.otlpInsecureGrpc }}
      otlp/default:
        endpoint: "{{ .Values.otlpLogsEndpointGrpc }}"
        tls:
          insecure: {{ .Values.otlpInsecureGrpc }}
      debug:
        verbosity: detailed

    service:
      telemetry:
        logs:
          level: debug
      pipelines:
        logs/userAudits:
          receivers: [otlp]
          processors: [memory_limiter, batch, filter/userAudits, transform/userAudits]
          exporters: [otlp/userAudits]
          # exporters: [debug]

        logs/userDiagnostics:
          receivers: [otlp]
          processors: [memory_limiter, batch, filter/userDiagnostics, transform/userDiagnostics]
          exporters: [otlp/userDiagnostics]
          # exporters: [debug]

        logs/default:
          receivers: [filelog]
          processors: [memory_limiter, batch, k8sattributes, resource/rename]
          exporters: [otlp/default]
          # exporters: [debug]

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "symphony.fullname" . }}-otel-forwarder
  labels:
    app: {{ include "symphony.appSelector" . }}-otel-forwarder
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ include "symphony.appSelector" . }}-otel-forwarder
  template:
    metadata:
      labels:
        app: {{ include "symphony.appSelector" . }}-otel-forwarder
    spec:
      # read prometheus metrics from manager and exports to mdm
      containers:
        - name: otel-collector
          image: "{{ .Values.observability.otelForwarder.image }}"
          command: ["/otelcol-contrib", "--config=/conf/otel-forwarder-config.yaml"]
          resources:
            limits:
              cpu: "1000m"
              memory: "2Gi"
            requests:
              cpu: "200m"
              memory: "400Mi"
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: otel-collector-conf
              mountPath: /conf
            - name: varlog
              mountPath: /var/log
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
      securityContext:
        runAsNonRoot: true
      serviceAccountName: '{{ include "symphony.fullname" . }}-otel-forwarder'
      terminationGracePeriodSeconds: 10
      volumes:
        - name: otel-collector-conf
          configMap:
            name: {{ include "symphony.fullname" . }}-otel-forwarder-config
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "symphony.fullname" . }}-otel-forwarder
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "symphony.fullname" . }}-otel-forwarder-clusterrole
rules:
- apiGroups: [""]
  resources: ["pods", "namespaces", "nodes"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "symphony.fullname" . }}-otel-forwarder-clusterrolebinding
subjects:
- kind: ServiceAccount
  name: {{ include "symphony.fullname" . }}-otel-forwarder
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ include "symphony.fullname" . }}-otel-forwarder-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "symphony.fullname" . }}-otel-forwarder-service
  labels:
    app: {{ include "symphony.appSelector" . }}-otel-forwarder
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - name: otlp-grpc # Default endpoint for OpenTelemetry gRPC receiver.
      port: 4317
      protocol: TCP
      targetPort: 4317
    - name: otlp-http # Default endpoint for OpenTelemetry HTTP receiver.
      port: 4318
      protocol: TCP
      targetPort: 4318
  selector:
    app: {{ include "symphony.appSelector" . }}-otel-forwarder

{{- end }}