openapi: 3.0.0
info:
  title: Symphony REST API Queries
  version: 1.0.0
servers:
  - url: http://localhost:8082/v1alpha2/
security:
  - bearerAuth: []  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    noauthAuth:
      type: http
      scheme: noauth  
  schemas:      
    SolutionContainerState:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/SolutionContainerSpec'
        status:
          $ref: '#/components/schemas/SolutionContainerStatus'
      additionalProperties: false
    SolutionContainerSpec:
      type: object
      description: Specification for the Solution Container.
      additionalProperties: false
    SolutionContainerStatus:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
          description: Arbitrary key-value properties describing the solution container's status.
    ObjectMeta:
      type: object
      description: Custom metadata structure for a Symphony resource
      properties:
        namespace:
          type: string
        name:
          type: string
        etag:
          type: string
          description: Version string of the object
        objGeneraion:
          type: integer
          format: int64
          description: Changes when spec changes
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string
        uid:
          type: string
          description: UID of the object (Kubernetes types.UID)
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/OwnerReference'
    CampaignContainerState:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/CampaignContainerSpec'
        status:
          $ref: '#/components/schemas/CampaignContainerStatus'
      additionalProperties: false
    CampaignContainerSpec:
      type: object
      description: Specification for the campaign container.
      additionalProperties: false
    CampaignContainerStatus:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
          description: Key-value properties of the campaign container status.
      required:
        - properties
      additionalProperties: false
    CampaignState:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/CampaignSpec'
      additionalProperties: false
    CampaignSpec:
      type: object
      properties:
        firstStage:
          type: string
        stages:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/StageSpec'
        selfDriving:
          type: boolean
        version:
          type: string
        rootResource:
          type: string
      additionalProperties: false
    StageSpec:
      type: object
      properties:
        name:
          type: string
        contexts:
          type: string
        provider:
          type: string
        config:
          type: object
          additionalProperties: true
          description: Arbitrary configuration (maps to Go interface{}).
        stageSelector:
          type: string
        inputs:
          type: object
          additionalProperties: true
          description: Free-form key/value inputs.
        handleErrors:
          type: boolean
        schedule:
          type: string
        target:
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskSpec'
        taskOption:
          $ref: '#/components/schemas/TaskOption'
      additionalProperties: false
    TaskSpec:
      type: object
      properties:
        name:
          type: string
        provider:
          type: string
        config:
          type: object
          additionalProperties: true
          description: Arbitrary configuration (maps to Go interface{}).
        inputs:
          type: object
          additionalProperties: true
        target:
          type: string
      additionalProperties: false
    TaskOption:
      type: object
      properties:
        concurrency:
          type: integer
          format: int32
        errorAction:
          $ref: '#/components/schemas/ErrorAction'
      additionalProperties: false
    ErrorAction:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/ErrorActionMode'
        maxToleratedFailures:
          type: integer
          format: int32
      additionalProperties: false
    ErrorActionMode:
      type: string
      description: Mode for handling task errors.
    ActivationState:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/ActivationSpec'
        status:
          $ref: '#/components/schemas/ActivationStatus'
      additionalProperties: false
    ActivationSpec:
      type: object
      properties:
        campaign:
          type: string
        stage:
          type: string
        inputs:
          type: object
          additionalProperties: true
          description: Free-form key/value inputs.
      additionalProperties: false
    ActivationStatus:
      type: object
      properties:
        activationGeneration:
          type: string
        updateTime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/State'
        statusMessage:
          type: string
        stageHistory:
          type: array
          items:
            $ref: '#/components/schemas/StageStatus'
      additionalProperties: false
    StageStatus:
      type: object
      properties:
        stage:
          type: string
        nextStage:
          type: string
        inputs:
          type: object
          additionalProperties: true
        outputs:
          type: object
          additionalProperties: true
        status:
          $ref: '#/components/schemas/State'
        isActive:
          type: boolean
        statusMessage:
          type: string
        errorMessage:
          type: string
      additionalProperties: false
    State:
      type: integer
      format: uint16
      description: State code.
    SolutionState:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/SolutionSpec'
      additionalProperties: false
    SolutionSpec:
      type: object
      properties:
        displayName:
          type: string
          description: Display name of the solution
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Arbitrary key-value metadata
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentSpec'
        version:
          type: string
          description: Version string of the solution
        rootResource:
          type: string
          description: Root resource identifier
      additionalProperties: false
    OwnerReference:
      type: object
      description: Reference to another Kubernetes object that owns this one
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        name:
          type: string
        uid:
          type: string
        controller:
          type: boolean
        blockOwnerDeletion:
          type: boolean
    TargetState:
      type: object
      description: Defines the current state of the target
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        status:
          $ref: '#/components/schemas/DeployableStatusV2'
        spec:
          $ref: '#/components/schemas/TargetSpec'
    TargetSpec:
      type: object
      properties:
        displayName:
          type: string
        scope:
          type: string
        solutionScope:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        properties:
          type: object
          additionalProperties:
            type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentSpec'
        constraints:
          type: string
        topologies:
          type: array
          items:
            $ref: '#/components/schemas/TopologySpec'
        forceRedeploy:
          type: boolean
        isDryRun:
          type: boolean
    DeployableStatusV2:
      type: object
      properties:
        provisioningStatus:
          $ref: '#/components/schemas/ProvisioningStatus'
        lastModified:
          type: string
          format: date-time
        deployed:
          type: integer
        targets:
          type: integer
        status:
          type: string
        statusDetails:
          type: string
        runningJobId:
          type: integer
        expectedRunningJobId:
          type: integer
        generation:
          type: integer
        targetStatuses:
          type: array
          items:
            $ref: '#/components/schemas/TargetDeployableStatus'
        properties:
          type: object
          additionalProperties:
            type: string
    ProvisioningStatus:
      type: object
      properties:
        operationId:
          type: string
        status:
          type: string
        percentComplete:
          type: integer
        failureCause:
          type: string
        logErrors:
          type: boolean
        error:
          $ref: '#/components/schemas/ErrorType'
        output:
          type: object
          additionalProperties:
            type: string
    ErrorType:
      type: string
      description: Enum or string describing error type
    TargetDeployableStatus:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        componentStatuses:
          type: array
          items:
            $ref: '#/components/schemas/ComponentDeployableStatus'
    ComponentDeployableStatus:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
    ComponentSpec:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        properties:
          type: object
          additionalProperties: true
        parameters:
          type: object
          additionalProperties:
            type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteSpec'
        constraints:
          type: string
        dependencies:
          type: array
          items:
            type: string
        skills:
          type: array
          items:
            type: string
        sidecars:
          type: array
          items:
            $ref: '#/components/schemas/SidecarSpec'
    RouteSpec:
      type: object
      properties:
        route:
          type: string
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterSpec'
    FilterSpec:
      type: object
      properties:
        direction:
          type: string
        type:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    SidecarSpec:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        properties:
          type: object
          additionalProperties: true
    TopologySpec:
      type: object
      properties:
        device:
          type: string
        selector:
          type: object
          additionalProperties:
            type: string
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/BindingSpec'
    BindingSpec:
      type: object
      required:
        - role
        - provider
      properties:
        role:
          type: string
        provider:
          type: string
        config:
          type: object
          additionalProperties:
            type: string
tags:
  - name: SolutionContainers
  - name: Solutions
  - name: Targets
  - name: Instances
  - name: Catalogs
  - name: Users
  - name: CampaignContainers
  - name: Campaigns
  - name: Activations
  - name: Agent
  - name: Devices
  - name: Models
  - name: Skills
  - name: Trails
  - name: Settings
  - name: Jobs
  - name: Echo
  - name: Solution
  - name: Federation
  - name: Hydra
paths:
  /solutioncontainers:
    get:
      tags:
        - SolutionContainers
      summary: List Solution Containers
      description: >
        Returns all Solution Containers in the system. In Symphony, each Solution is contained within a Solution Container, but this query only retrieves the containers themselves—not their associated Solutions. Use the optional doc-type parameter to choose the output format (json by default or yaml), and the optional path parameter (JSONPath expression) to return only specific parts of each container. 
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace used to filter Solution Containers. The default is an empty string (""), which is equivalent to 'default'.
        - name: doc-type
          in: query
          description: Returned document type, either 'yaml' or 'json'. Default is 'json'.
          schema:
            type: string
          example: json
        - name: path
          in: query
          description: JSONPath expression to specify the part of the spec to retrieve
          schema:
            type: string
          example: $
      responses:
        '200':
          description: Return a list of Solution Containers
          content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SolutionContainerState'
            example:
              - metadata:
                  namespace: 'default'
                  name: 'my-solution'
                spec: {}
              - metadata:
                  namespace: 'default'
                  name: 'other-solution'
                spec: {}
  /solutioncontainers/{solutionContainerName}:
    post:
      tags:
        - SolutionContainers
      summary: Create Solution Container
      description: >
        Creates a new Solution Container with the specified name and namespace. The Solution Container is a logical grouping for Solutions in Symphony. The request metadata.name must match the solutionContainerName path parameter, and it must be unique within the specified namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolutionContainerState'
            example:
              metadata:
                namespace: 'default'
                name: 'my-solution'
              spec: {}
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Solution Container. The default is an empty string (""), which is equivalent to 'default'.
        - name: solutionContainerName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - SolutionContainers
      summary: Get Solution Container spec as either YAML or JSON
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Solution Container. The default is an empty string (""), which is equivalent to 'default'.
        - name: doc-type
          in: query
          description: Returned document type, either 'yaml' or 'json'. Default is 'json'.
          schema:
            type: string
          example: json
        - name: path
          in: query
          description: JSONPath expression to specify the part of the spec to retrieve
          schema:
            type: string
          example: $.metadata
        - name: solutionContainerName
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved Solution Container spec
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionContainerState'
              example:
                metadata:
                  namespace: 'default'
                  name: 'my-solution'
                spec: {}
        '404':
          description: Solution Container not found
          content:
            application/text:
              schema:
                type: string
              example: "Not Found: entry 'my-solution' is not found in namespace default"
    delete:
      tags:
        - SolutionContainers
      summary: Delete Solution Container
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Solution Container. The default is an empty string (""), which is equivalent to 'default'.
        - name: solutionContainerName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful deletion
        '404':
          description: Solution Container not found
          content:
            application/text:
              schema:
                type: string
              example: "Not Found: entry 'my-solution' is not found"
  /solutions/{solutionName}:
    post:
      tags:
        - Solutions
      summary: Create Solution inside a Solution Container. 
      description: >
        Creates a new Solution within the specified Solution Container. The request body must contain the SolutionState object, and the solutionName path parameter must match the metadata.name field in the request body. The spec.rootResource of the Solution must reference an existing Solution Container, and the Solution name must follow the format <container>-v-<name>. For example, to add a v1 Solution to the my-solution container, the Solution name should be my-solution-v-v1. As a special case, you may create a Solution object that contains a single component with the name set to embed-component, the type set to embed-type, and a single property named embed-property whose value is the raw request body text.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SolutionState'
            example:
              metadata:
                name: 'my-solution-v-v1'
              spec:
                rootResource: 'my-solution'
                components:
                  - name: 'mock'
                    type: 'mock'
                    properties:
                      foo: 'bar'
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Solution. The default is an empty string (""), which is equivalent to 'default'.
        - name: embed-type
          in: query
          schema:
            type: string
          description: Type of the embedded component, e.g., 'mock'.
        - name: embed-component
          in: query
          schema:
            type: string
          description: Name of the embedded component, e.g., 'mock'.
        - name: embed-property
          in: query
          schema:
            type: string
          description: Name of the property in the embedded component, e.g., 'foo'.
        - name: solutionName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful creation of Solution
    get:
      tags:
        - Solutions
      summary: Get Solution spec as either YAML or JSON
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Solution. The default is an empty string (""), which is equivalent to 'default'.
        - name: doc-type
          in: query
          description: Returned document type, either 'yaml' or 'json'. Default is 'json'.
          schema:
            type: string
          example: json
        - name: path
          in: query
          description: JSONPath expression to specify the part of the spec to retrieve
          schema:
            type: string
          example: $.spec
        - name: solutionName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionState'
              example:
                metadata:
                  name: 'my-solution-v-v1'
                spec:
                  rootResource: 'my-solution'
                  components:
                    - name: 'mock'
                      type: 'mock'
                      properties:
                        foo: 'bar'
    delete:
      tags:
        - Solutions
      summary: Delete Solution
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Solution. The default is an empty string (""), which is equivalent to 'default'.
        - name: solutionName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful deletion
  /solutions:
    get:
      tags:
        - Solutions
      summary: List Solutions
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace used to filter Solutions. The default is an empty string (""), which is equivalent to 'default'.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Solutions
          content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SolutionState'
            example:
              - metadata:
                  name: 'my-solution-v-v1'
                spec:
                  rootResource: 'my-solution'
                  components:
                    - name: 'mock1'
                      type: 'mock'
                      properties:
                        foo: 'bar'
              - metadata:
                  name: 'my-solution-v-v2'
                spec:
                  rootResource: 'my-solution'
                  components:
                    - name: 'mock2'
                      type: 'mock'
                      properties:
                        bar: 'baz'
  /targets/registry:
    get:
      tags:
        - Targets
      summary: List Targets
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace used to filter Targets. The default is an empty string (""), which is equivalent to 'default'.             
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Targets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TargetState'
              example:
                - metadata:
                    name: 'target-1'
                  spec:                
                    properties:
                      foo: 'bar'
  /targets/registry/{targetName}:
    post:
      tags:
        - Targets
      summary: Create a Target. As a special case, you can create a Target with a providers.target.staging binding with a with-binding=staging parameter.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetState'
            example:
              metadata:
                name: 'target-1'
              spec:
                properties:
                  foo: 'bar'  
      security:
        - bearerAuth: []
      parameters:
        - name: with-binding
          in: query
          schema:
            type: string
          example: staging
        - name: targetName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful creation of Target          
    get:
      tags:
        - Targets
      summary: Get Target spec as either YAML or JSON
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Target. The default is an empty string (""), which is equivalent to 'default'.
        - name: doc-type
          in: query
          description: Returned document type, either 'yaml' or 'json'. Default is 'json'.
          schema:
            type: string
          example: json
        - name: path
          in: query
          description: JSONPath expression to specify the part of the spec to retrieve
          schema:
            type: string
          example: $.spec
        - name: targetName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetState'
              example:
                metadata:
                  name: 'target-1'
                spec:
                  properties:
                    foo: 'bar'                
    delete:
      tags:
        - Targets
      summary: Delete Target with direct delete flag
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Target. The default is an empty string (""), which is equivalent to 'default'.       
        - name: direct
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: targetName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response          
  /targets/bootstrap:
    post:
      tags:
        - Targets
      summary: Bootstrap (PoC)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: symphony-test
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /targets/download/yaml/{targetName}:
    get:
      tags:
        - Targets
      summary: Download Target spec YAML (obsolete?)
      security:
        - bearerAuth: []
      parameters:
        - name: path
          in: query
          schema:
            type: string
          example: $.spec
        - name: targetName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /targets/ping/{targetName}:
    get:
      tags:
        - Targets
      summary: Target heartbeat
      security:
        - bearerAuth: []
      parameters:
        - name: targetName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /targets/status/{targetName}:
    put:
      tags:
        - Targets
      summary: Report Target status
      description: >
        Accepts a JSON object where each key-value pair represents a status property. The submitted properties are written to the target’s status.properties collection. Symphony does not require target provider implementations to report status through this endpoint—any on-device or external agent may optionally send live status updates via this channel.
      requestBody:
        required: true
        description: Status update as a key-value map of strings.
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: object
                  required:
                    - properties
                  properties:
                    properties:
                      type: object
                      additionalProperties:
                        type: string
              example:
                status:
                  properties:
                    foo: "bar"
                    uptime: "72h"
                    health: "healthy"
      security:
        - bearerAuth: []
      parameters:
        - name: targetName
          in: path
          required: true
          description: Name of the target to report status for.
          schema:
            type: string
        - name: namespace
          in: query
          required: false
          description: Optional namespace to scope the status update.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TargetState'
  /instances/{INSTANCE_NAME}:
    post:
      tags:
        - Instances
      summary: Create Instance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                displayName: '{{INSTANCE_NAME}}'
                solution: '{{SOLUTION_NAME}}'
                target:
                  name: '{{TARGET_NAME}}'
      security:
        - bearerAuth: []
      parameters:
        - name: INSTANCE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Instances
      summary: Get Instance spec YAML
      security:
        - bearerAuth: []
      parameters:
        - name: doc-type
          in: query
          schema:
            type: string
          example: yaml
        - name: path
          in: query
          schema:
            type: string
          example: $.spec
        - name: INSTANCE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Instances
      summary: Delete Instance
      security:
        - bearerAuth: []
      parameters:
        - name: INSTANCE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /instances:
    get:
      tags:
        - Instances
      summary: List Instances
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /catalogs/registry:
    get:
      tags:
        - Catalogs
      summary: List Catalogs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /catalogs/registry/{CATALOG_NAME}:
    post:
      tags:
        - Catalogs
      summary: Create Catalog
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: '{{CATALOG_NAME}}'
                type: asset
                properties:
                  foo: bar
      security:
        - bearerAuth: []
      parameters:
        - name: CATALOG_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Catalogs
      summary: Get Catalog spec YAML
      security:
        - bearerAuth: []
      parameters:
        - name: doc-type
          in: query
          schema:
            type: string
          example: yaml
        - name: path
          in: query
          schema:
            type: string
          example: $.spec
        - name: CATALOG_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Catalogs
      summary: Delete Catalog
      security:
        - bearerAuth: []
      parameters:
        - name: CATALOG_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /catalogs/graph:
    get:
      tags:
        - Catalogs
      summary: List Catalogs - Config Chains
      security:
        - bearerAuth: []
      parameters:
        - name: template
          in: query
          schema:
            type: string
          example: config-chains
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /catalogs/check:
    post:
      tags:
        - Catalogs
      summary: Validate Catalog
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: '{{CATALOG_NAME}}'
                type: asset
                properties:
                  foo: bar
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /catalogs/registry/{CATALOG_NAME}-2:
    post:
      tags:
        - Catalogs
      summary: Create Catalog 2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: '{{CATALOG_NAME}}-2'
                type: asset
                properties:
                  foo: new bar
      security:
        - bearerAuth: []
      parameters:
        - name: CATALOG_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/auth:
    post:
      tags:
        - Users
      summary: User authentication with password
      description: >
        Symphony supports both mutual certificate authentication and authentication via an external identity provider. When this route is enabled, users can also authenticate using pre-configured usernames and passwords. The obtained bearer token can then be attached to subsequent requests to access protected resources.
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: 'admin'
                password: ''
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  tokenType:
                    type: string
                    example: Bearer
                  username:
                    type: string
                  roles:
                    type: array
                    items:
                      type: string
                example:
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  tokenType: Bearer
                  username: admin
                  roles:
                    - admin
                    - user
        '403':
          description: Authentication failed – unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid username or password
  /campaigncontainers:
     get:
      tags:
        - CampaignContainers
      summary: List Campaign Containers
      description: >
        Returns all Campaign Containers in the system. In Symphony, each Campaign is contained within a Campaign Container, but this query only retrieves the containers themselves—not their associated Campaign. Use the optional doc-type parameter to choose the output format (json by default or yaml), and the optional path parameter (JSONPath expression) to return only specific parts of each container. 
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace used to filter Campaign Containers. The default is an empty string (""), which is equivalent to 'default'.
        - name: doc-type
          in: query
          description: Returned document type, either 'yaml' or 'json'. Default is 'json'.
          schema:
            type: string
          example: json
        - name: path
          in: query
          description: JSONPath expression to specify the part of the spec to retrieve
          schema:
            type: string
          example: $
      responses:
        '200':
          description: Return a list of Campaign Containers
          content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CampaignContainerState'
            example:
              - metadata:
                  namespace: 'default'
                  name: 'campaign-1'
                spec: {}
              - metadata:
                  namespace: 'default'
                  name: 'campaign-2'
                spec: {}
  /campaigncontainers/{campaignContainerName}:
    post:
      tags:
        - CampaignContainers
      summary: Create Campaign Container
      description: >
        Creates a new Campaign Container with the specified name and namespace. The Campaign Container is a logical grouping for Campaigns in Symphony. The request metadata.name must match the campaignContainerName path parameter, and it must be unique within the specified namespace.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignContainerState'
            example:
              metadata:
                namespace: 'default'
                name: 'campaign-1'
              spec: {}
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Campaign Container. The default is an empty string (""), which is equivalent to 'default'.
        - name: campaignContainerName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - CampaignContainers
      summary: Get Campaign Container spec as either YAML or JSON
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Campaign Container. The default is an empty string (""), which is equivalent to 'default'.
        - name: doc-type
          in: query
          description: Returned document type, either 'yaml' or 'json'. Default is 'json'.
          schema:
            type: string
          example: json
        - name: path
          in: query
          description: JSONPath expression to specify the part of the spec to retrieve
          schema:
            type: string
          example: $.metadata
        - name: campaignContainerName
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved Campaign Container spec
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignContainerState'
              example:
                metadata:
                  namespace: 'default'
                  name: 'campaign-1'
                spec: {}
        '404':
          description: Campaign Container not found
          content:
            application/text:
              schema:
                type: string
              example: "Not Found: entry 'campaign-1' is not found in namespace default"
    delete:
      tags:
        - CampaignContainers
      summary: Delete Campaign Container
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Campaign Container. The default is an empty string (""), which is equivalent to 'default'.
        - name: campaignContainerName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful deletion
        '404':
          description: Campaign Container not found
          content:
            application/text:
              schema:
                type: string
              example: "Not Found: entry 'campaign-1' is not found"
  /campaigns/{campaignName}:
    post:
      tags:
        - Campaigns
      summary: Create Campaign inside a Campaign Container. 
      description: >
        Creates a new Campaign within the specified Campaign Container. The request body must contain the CampaignState object, and the campaignName path parameter must match the metadata.name field in the request body. The spec.rootResource of the Campaign must reference an existing Campaign Container, and the Campaign name must follow the format <container>-v-<name>. For example, to add a v1 Campaign to the campaign-1 container, the Campaign name should be campaign-1-v-v1. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignState'
            example:
              metadata:
                name: 'campaign-1-v-v1'
              spec:
                rootResource: 'campaign-1'
                firstStage: mock
                selfDriving: true
                stages:
                  mock:
                    name: mock
                    provider: providers.stage.mock
                    inputs:
                      foo: ${{$output(mock,foo)}}
                    stageSelector: ${{$if($lt($output(mock,foo), 5), mock, '')}}
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Campaign. The default is an empty string (""), which is equivalent to 'default'.      
        - name: campaignName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful creation of Campaign
    get:
      tags:
        - Campaigns
      summary: Get Campaign spec as either YAML or JSON
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Campaign. The default is an empty string (""), which is equivalent to 'default'.
        - name: doc-type
          in: query
          description: Returned document type, either 'yaml' or 'json'. Default is 'json'.
          schema:
            type: string
          example: json
        - name: path
          in: query
          description: JSONPath expression to specify the part of the spec to retrieve
          schema:
            type: string
          example: $.spec
        - name: campaignName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignState'
              example:
                metadata:
                  name: 'campaign-1-v-v1'
                spec:
                  rootResource: 'campaign-1'
                  firstStage: mock
                  selfDriving: true
                  stages:
                    mock:
                      name: mock
                      provider: providers.stage.mock
                      inputs:
                        foo: ${{$output(mock,foo)}}
                      stageSelector: ${{$if($lt($output(mock,foo), 5), mock, '')}}
    delete:
      tags:
        - Campaigns
      summary: Delete Campaign
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Campaign. The default is an empty string (""), which is equivalent to 'default'.       
        - name: campaignName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response          
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: List Campaigns
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace used to filter Campaigns. The default is an empty string (""), which is equivalent to 'default'.   
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Campaigns
          content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CampaignState'
            example:
              - metadata:
                  name: 'campaign-1-v-v1'
                spec:
                  rootResource: 'campaign-1'
                  firstStage: mock
                  selfDriving: true
                  stages:
                    mock:
                      name: mock
                      provider: providers.stage.mock
                      inputs:
                        foo: ${{$output(mock,foo)}}
                      stageSelector: ${{$if($lt($output(mock,foo), 5), mock, '')}}
  /activations/registry/{activationName}:
    post:
      tags:
        - Activations
      summary: Create Activation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivationState'
            example:
              metadata:
                name: 'activation-1'
              spec:                
                campaign: 'campaign-1:v1'                
                stage: ''
                inputs:
                  foo: 0
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Activation. The default is an empty string (""), which is equivalent to 'default'.      
        - name: activationName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful creation of Activation          
    get:
      tags:
        - Activations
      summary: Get Activation spec as either YAML or JSON
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Activation. The default is an empty string (""), which is equivalent to 'default'.
        - name: doc-type
          in: query
          description: Returned document type, either 'yaml' or 'json'. Default is 'json'.
          schema:
            type: string
          example: json
        - name: path
          in: query
          description: JSONPath expression to specify the part of the spec to retrieve
          schema:
            type: string
          example: $.spec
        - name: activationName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivationState'
              example:
                metadata:
                name: 'activation-1'
                spec:                
                  campaign: 'campaign-1:v1'                  
                  stage: ''
                  inputs:
                    foo: 0
    delete:
      tags:
        - Activations
      summary: Delete Activation
      security:
        - bearerAuth: []
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace of Activation. The default is an empty string (""), which is equivalent to 'default'.  
        - name: activationName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response          
  /activations/registry:
    get:
      tags:
        - Activations
      summary: List Activations
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
          description: Namespace used to filter Activations. The default is an empty string (""), which is equivalent to 'default'.       
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of Activations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivationState'
              example:
                - metadata:
                    name: 'activation-1'
                  spec:                
                    campaign: 'campaign-1:v1'                    
                    stage: ''
                    inputs:
                      foo: 0
  /activations/status/{activationName}:
    post:
      tags:
        - Activations
      summary: Report Activation status
      requestBody:
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/ActivationStatus'
            example:
              stage: mock
              outputs:
                __activation: test-activation
                __activationGeneration: '1'
                __campaign: test-campaign
                __previousStage: mock
                __site: hq
                __stage: mock
                status: 200
                foo: 5
              status: 9996
      security:
        - bearerAuth: []
      parameters:
        - name: activationName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /agent/references:
    post:
      tags:
        - Agent
      summary: Update object status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                foo: bar bar
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          schema:
            type: string
          example: '{{CATALOG_NAME}}'
        - name: ref
          in: query
          schema:
            type: string
          example: v1alpha2.ReferenceK8sCRD
        - name: kind
          in: query
          schema:
            type: string
          example: catalogs
        - name: group
          in: query
          schema:
            type: string
          example: federation.symphony
        - name: version
          in: query
          schema:
            type: string
          example: v1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Agent
      summary: Get object reference - solution
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          schema:
            type: string
          example: '{{SOLUTION_NAME}}'
        - name: ref
          in: query
          schema:
            type: string
          example: v1alpha2.ReferenceK8sCRD
        - name: kind
          in: query
          schema:
            type: string
          example: solutions
        - name: group
          in: query
          schema:
            type: string
          example: solution.symphony
        - name: version
          in: query
          schema:
            type: string
          example: v1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /agent/config:
    post:
      tags:
        - Agent
      summary: Update provider configuration (PoC)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: providers.reference.customvision
                config: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /devices/{DEVICE_NAME}:
    post:
      tags:
        - Devices
      summary: Create Device
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                displayName: '{{DEVICE_NAME}}'
                properties:
                  foo: bar
                bindings:
                  - role: instance
                    provider: providers.target.k8s
                    config:
                      inCluster: 'true'
                      deploymentStrategy: services
      security:
        - bearerAuth: []
      parameters:
        - name: DEVICE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Devices
      summary: Get Device spec YAML
      security:
        - bearerAuth: []
      parameters:
        - name: doc-type
          in: query
          schema:
            type: string
          example: yaml
        - name: path
          in: query
          schema:
            type: string
          example: $.spec
        - name: DEVICE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Devices
      summary: Delete Device
      security:
        - bearerAuth: []
      parameters:
        - name: DEVICE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /devices:
    get:
      tags:
        - Devices
      summary: List Devices
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /models/{MODEL_NAME}:
    post:
      tags:
        - Models
      summary: Create Model
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                displayName: '{{MODEL_NAME}}'
                properties:
                  foo: bar
                constraints: ''
                bindings:
                  - role: instance
                    provider: providers.target.k8s
                    config:
                      inCluster: 'true'
                      deploymentStrategy: services
      security:
        - bearerAuth: []
      parameters:
        - name: MODEL_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Models
      summary: Get Model spec YAML
      security:
        - bearerAuth: []
      parameters:
        - name: doc-type
          in: query
          schema:
            type: string
          example: yaml
        - name: path
          in: query
          schema:
            type: string
          example: $.spec
        - name: MODEL_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Models
      summary: Delete Model
      security:
        - bearerAuth: []
      parameters:
        - name: MODEL_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /models:
    get:
      tags:
        - Models
      summary: List Models
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /skills/{SKILL_NAME}:
    post:
      tags:
        - Skills
      summary: Create Skill
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                displayName: '{{SKILL_NAME}}'
                properties:
                  foo: bar
                parameters:
                  delay_buffer: '0.1'
                  model_platform: invalid
                  model_flavor: edge
                nodes:
                  - id: '1'
                    type: export
                    name: video_snippet_export
                    configuration:
                      filename_prefix: test
                      recording_duration: ${{param(model_flavor)}}
                      insights_overlay: ${{model_platform}}
                      delay_buffer: ${{delay_buffer}}
                edges: []
                bindings:
                  - role: instance
                    provider: providers.target.k8s
                    config:
                      inCluster: 'true'
                      deploymentStrategy: services
      security:
        - bearerAuth: []
      parameters:
        - name: SKILL_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Skills
      summary: Get Skill spec YAML
      security:
        - bearerAuth: []
      parameters:
        - name: doc-type
          in: query
          schema:
            type: string
          example: yaml
        - name: path
          in: query
          schema:
            type: string
          example: $.spec
        - name: SKILL_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Skills
      summary: Delete Skill
      security:
        - bearerAuth: []
      parameters:
        - name: SKILL_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /skills:
    get:
      tags:
        - Skills
      summary: List Skills
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /jobs:
    post:
      tags:
        - Jobs
      summary: Submit activation job
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                campaign: '{{CAMPAIGN_NAME}}'
                activation: '{{ACTIVATION_NAME}}'
                activationGeneration: '1'
                stage: first-stage
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /settings/config:
    get:
      tags:
        - Settings
      summary: Get config
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /settings/config/{CATALOG_NAME}:
    get:
      tags:
        - Settings
      summary: Get config field with overrides
      security:
        - bearerAuth: []
      parameters:
        - name: field
          in: query
          schema:
            type: string
          example: foo
        - name: overrides
          in: query
          schema:
            type: string
          example: '{{CATALOG_NAME}}-2,{{CATALOG_NAME}}-2'
        - name: CATALOG_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /greetings:
    post:
      tags:
        - Echo
      summary: Trace (PoC, obsolete)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                foo: bar
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /solution/reconcile:
    post:
      tags:
        - Solution
      summary: Direct delete deployment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                solutionName: redis
                solution:
                  components:
                    - name: redis
                      type: container
                      properties:
                        container.image: redis
                targets:
                  local:
                    topologies:
                      - bindings:
                          - role: instance
                            provider: providers.target.docker
                            config: {}
                assignments:
                  local: '{redis}'
      security:
        - bearerAuth: []
      parameters:
        - name: delete
          in: query
          schema:
            type: boolean
          example: 'true'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /solution/instances:
    get:
      tags:
        - Solution
      summary: Get components
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Solution
      summary: Apply deployment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                solutionName: redis
                solution:
                  components:
                    - name: redis
                      type: container
                      properties:
                        container.image: redis
                targets:
                  local:
                    topologies:
                      - bindings:
                          - role: instance
                            provider: providers.target.docker
                            config: {}
                assignments:
                  local: '{redis}'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Solution
      summary: Delete components
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /solution/queue:
    get:
      tags:
        - Solution
      summary: Get instance status
      security:
        - bearerAuth: []
      parameters:
        - name: instance
          in: query
          schema:
            type: string
          example: '{{INSTANCE_NAME}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Solution
      summary: Queue target deletion job
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      security:
        - bearerAuth: []
      parameters:
        - name: instance
          in: query
          schema:
            type: string
          example: '{{TARGET_NAME}}'
        - name: target
          in: query
          schema:
            type: boolean
          example: 'true'
        - name: delete
          in: query
          schema:
            type: boolean
          example: 'true'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /federation/sync/my-site:
    get:
      tags:
        - Federation
      summary: Get sync jobs
      security:
        - bearerAuth: []
      parameters:
        - name: count
          in: query
          schema:
            type: integer
          example: '10'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /federation/sync:
    post:
      tags:
        - Federation
      summary: Submit activation job
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                campaign: '{{CAMPAIGN_NAME}}'
                activation: '{{ACTIVATION_NAME}}'
                activationGeneration: '1'
                stage: first-stage
      security:
        - bearerAuth: []
      parameters:
        - name: site
          in: query
          schema:
            type: string
          example: my-site
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /federation/registry/{SITE_NAME}:
    post:
      tags:
        - Federation
      summary: Register Site
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: '{{SITE_NAME}}'
                properties:
                  foo: bar
                isSelf: false
                publicKey: SOME KEY
      security:
        - bearerAuth: []
      parameters:
        - name: SITE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Federation
      summary: Get Site spec YAML
      security:
        - bearerAuth: []
      parameters:
        - name: doc-type
          in: query
          schema:
            type: string
          example: yaml
        - name: path
          in: query
          schema:
            type: string
          example: $.spec
        - name: SITE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Federation
      summary: Delete Site
      security:
        - bearerAuth: []
      parameters:
        - name: SITE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /federation/registry:
    get:
      tags:
        - Federation
      summary: List Sites
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /federation/status/{SITE_NAME}:
    post:
      tags:
        - Federation
      summary: Report Site status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: '{{SITE_NAME}}'
                status:
                  isOnline: false
      security:
        - bearerAuth: []
      parameters:
        - name: SITE_NAME
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /federation/trail:
    post:
      tags:
        - Federation
      summary: Trail (obsolete)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: '{{SITE_NAME}}'
                status:
                  isOnline: false
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /federation/k8shook:
    post:
      tags:
        - Federation
      summary: Create catalog hook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: '{{CATALOG_NAME}}'
                type: asset
                properties:
                  foo: bar
      security:
        - bearerAuth: []
      parameters:
        - name: objectType
          in: query
          schema:
            type: string
          example: catalog
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /hydra/{SYSTEM}/{OBJ_TYPE}/{KEY}:
    get:
      tags:
        - Hydra
      summary: Get Hydra object
      security:
        - bearerAuth: []
      parameters:
        - name: SYSTEM
          in: path
          schema:
            type: string
          required: true
        - name: OBJ_TYPE
          in: path
          schema:
            type: string
          required: true
        - name: KEY
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Hydra
      summary: Create or update Hydra object
      parameters:
        - name: SYSTEM
          in: path
          schema:
            type: string
          required: true
        - name: OBJ_TYPE
          in: path
          schema:
            type: string
          required: true
        - name: KEY
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}